{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to wyvern's documentation. wyvern is a flexible and easy to use Discord API wrapper for python \ud83d\ude80.","title":"Getting Started"},{"location":"#welcome-to-wyverns-documentation","text":"wyvern is a flexible and easy to use Discord API wrapper for python \ud83d\ude80.","title":"Welcome to wyvern's documentation."},{"location":"api_reference/client/","text":"The main bot class which acts as an interface between the Discord API and your bot. Parameters: Name Type Description Default token str The bot token to use. required intents typing . SupportsInt | wyvern . intents . Intents The intents to use while logging in to the gateway. Intents.UNPRIVILEGED event_handler type [ EventHandler ] A EventHandler subclass ( not instance ), if any. EventHandler rest_client RESTClient | None A custom RESTClient subclass to use, if any. None api_version int Discord API version to use. 10 client_session aiohttp . ClientSession | None ClientSession subclass to use, if any. None Source code in wyvern/client.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 class GatewayClient : \"\"\"The main bot class which acts as an interface between the Discord API and your bot. Parameters ---------- token : str The bot token to use. intents : typing.SupportsInt | wyvern.intents.Intents The intents to use while logging in to the gateway. event_handler type[EventHandler] A EventHandler subclass ( not instance ), if any. rest_client : RESTClient | None A custom RESTClient subclass to use, if any. api_version : int Discord API version to use. client_session : aiohttp.ClientSession | None ClientSession subclass to use, if any. \"\"\" def __init__ ( self , token : str , * , intents : typing . SupportsInt | Intents = Intents . UNPRIVILEGED , event_handler : type [ EventHandler ] = EventHandler , rest_client : RESTClient | None = None , api_version : int = 10 , client_session : \"aiohttp.ClientSession\" | None = None , ) -> None : self . event_handler = event_handler ( self ) self . rest = rest_client or RESTClient ( client = self , token = token , api_version = api_version , client_session = client_session ) self . intents = intents if isinstance ( intents , Intents ) else Intents ( int ( intents )) self . gateway = Gateway ( self ) async def start ( self ) -> None : \"\"\"Connects the bot with gateway and starts listening to events.\"\"\" await self . gateway . _get_socket_ready () _LOGGER . debug ( \"Logging in with static token.\" ) try : await self . rest . fetch_client_user () except Unauthorized as e : await self . rest . _session . close () raise e await self . gateway . listen_gateway () def run ( self ) -> None : \"\"\"A non-async method which call [wyvern.client.GatewayClient.start][].\"\"\" loop = asyncio . get_event_loop () loop . run_until_complete ( self . start ()) run () A non-async method which call wyvern.client.GatewayClient.start . Source code in wyvern/client.py 91 92 93 94 def run ( self ) -> None : \"\"\"A non-async method which call [wyvern.client.GatewayClient.start][].\"\"\" loop = asyncio . get_event_loop () loop . run_until_complete ( self . start ()) start () async Connects the bot with gateway and starts listening to events. Source code in wyvern/client.py 79 80 81 82 83 84 85 86 87 88 89 async def start ( self ) -> None : \"\"\"Connects the bot with gateway and starts listening to events.\"\"\" await self . gateway . _get_socket_ready () _LOGGER . debug ( \"Logging in with static token.\" ) try : await self . rest . fetch_client_user () except Unauthorized as e : await self . rest . _session . close () raise e await self . gateway . listen_gateway ()","title":"client"},{"location":"api_reference/client/#wyvern.client.GatewayClient.run","text":"A non-async method which call wyvern.client.GatewayClient.start . Source code in wyvern/client.py 91 92 93 94 def run ( self ) -> None : \"\"\"A non-async method which call [wyvern.client.GatewayClient.start][].\"\"\" loop = asyncio . get_event_loop () loop . run_until_complete ( self . start ())","title":"run()"},{"location":"api_reference/client/#wyvern.client.GatewayClient.start","text":"Connects the bot with gateway and starts listening to events. Source code in wyvern/client.py 79 80 81 82 83 84 85 86 87 88 89 async def start ( self ) -> None : \"\"\"Connects the bot with gateway and starts listening to events.\"\"\" await self . gateway . _get_socket_ready () _LOGGER . debug ( \"Logging in with static token.\" ) try : await self . rest . fetch_client_user () except Unauthorized as e : await self . rest . _session . close () raise e await self . gateway . listen_gateway ()","title":"start()"},{"location":"api_reference/events/","text":"Events Event Event Enums. Source code in wyvern/events.py 14 15 16 17 class Event : \"\"\"Event Enums.\"\"\" MESSAGE_CREATE = \"MESSAGE_CREATE\" EventHandler Event handler to deal with incoming events from the Gateway. Parameters: Name Type Description Default client wyvern . client . GatewayClient The client binded with the event handler. required Attributes: Name Type Description listeners dict [ str | [ wyvern . events . Event ], list [ wyvern . events . EventListener ]] A container for event listeners. Source code in wyvern/events.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 class EventHandler : \"\"\" Event handler to deal with incoming events from the Gateway. Parameters ---------- client : wyvern.client.GatewayClient The client binded with the event handler. Attributes ---------- listeners: dict[str | [wyvern.events.Event], list[wyvern.events.EventListener]] A container for event listeners. \"\"\" listeners : dict [ str | Event , list [ EventListener ]] = {} def __new__ ( cls : type [ \"EventHandler\" ], client : \"GatewayClient\" ) -> \"EventHandler\" : inst = super () . __new__ ( cls ) for _obj in cls . __mro__ : for item in _obj . __dict__ . values (): if isinstance ( item , EventListener ): inst . add_listener ( item ) return inst def __init__ ( self , client : \"GatewayClient\" ) -> None : self . client = client def listen ( self ) -> typing . Callable [[ EventListener ], EventListener ]: \"\"\" This decorator adds a listener object to the handler's container Example ------- >>> import wyvern >>> >>> client = wyvern.GatewayClient(\"TOKEN\") >>> >>> @client.event_handler.listen() >>> @wyvern.listener(wyvern.Event.MESSAGE_CREATE) >>> async def message_create(message: wyvern.Message) -> None: >>> ... >>> >>> client.run() Returns ------- wyvern.events.EventListener The listener that was created using @listener decorator. \"\"\" def inner ( listener_obj : EventListener ) -> EventListener : self . add_listener ( listener_obj ) return listener_obj return inner def add_listener ( self , listener : EventListener ) -> None : self . listeners . setdefault ( listener . event_type , []) . append ( listener ) def dispatch ( self , event : str , * args : typing . Any ) -> None : \"\"\" Dispatches events from the gateway. This method runs all the listeners registered in the container for the specific event. Parameters ---------- event: str Name of the event to be dispatched. *args: tuple[typing.Any, ...] Arguments to provide in callbacks. \"\"\" invokes = [ ( listener ( self , * args ) if ( len ( str ( listener . callback ) . split ( \".\" )) > 1 ) else listener ( * args )) for listener in self . listeners . get ( event , []) if listener . max_trigger > listener . trigger_count ] asyncio . gather ( * invokes ) dispatch ( event , * args ) Dispatches events from the gateway. This method runs all the listeners registered in the container for the specific event. Parameters: Name Type Description Default event str Name of the event to be dispatched. required *args typing . Any Arguments to provide in callbacks. () Source code in wyvern/events.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def dispatch ( self , event : str , * args : typing . Any ) -> None : \"\"\" Dispatches events from the gateway. This method runs all the listeners registered in the container for the specific event. Parameters ---------- event: str Name of the event to be dispatched. *args: tuple[typing.Any, ...] Arguments to provide in callbacks. \"\"\" invokes = [ ( listener ( self , * args ) if ( len ( str ( listener . callback ) . split ( \".\" )) > 1 ) else listener ( * args )) for listener in self . listeners . get ( event , []) if listener . max_trigger > listener . trigger_count ] asyncio . gather ( * invokes ) listen () This decorator adds a listener object to the handler's container Example >>> import wyvern >>> >>> client = wyvern.GatewayClient(\"TOKEN\") >>> >>> @client.event_handler.listen() >>> @wyvern.listener(wyvern.Event.MESSAGE_CREATE) >>> async def message_create(message: wyvern.Message) -> None: >>> ... >>> >>> client.run() Returns: Type Description wyvern . events . EventListener The listener that was created using @listener decorator. Source code in wyvern/events.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def listen ( self ) -> typing . Callable [[ EventListener ], EventListener ]: \"\"\" This decorator adds a listener object to the handler's container Example ------- >>> import wyvern >>> >>> client = wyvern.GatewayClient(\"TOKEN\") >>> >>> @client.event_handler.listen() >>> @wyvern.listener(wyvern.Event.MESSAGE_CREATE) >>> async def message_create(message: wyvern.Message) -> None: >>> ... >>> >>> client.run() Returns ------- wyvern.events.EventListener The listener that was created using @listener decorator. \"\"\" def inner ( listener_obj : EventListener ) -> EventListener : self . add_listener ( listener_obj ) return listener_obj return inner EventListener Class representating a callable to be called when a specific event type is dispatched. Parameters: Name Type Description Default event_type str | wyvern . events . Event The type of event this listener belongs to. required callback typing . Callable [..., typing . Awaitable [ typing . Any ]] The coroutine to run when event is dispatched required max_trigger int | float Max amount of time this listener will be triggered. required Attributes: Name Type Description trigger_count int Number of times this listener has been triggered Source code in wyvern/events.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 @attrs . define class EventListener : \"\"\" Class representating a callable to be called when a specific event type is dispatched. Parameters ---------- event_type : str | wyvern.events.Event The type of event this listener belongs to. callback : typing.Callable[..., typing.Awaitable[typing.Any]] The coroutine to run when event is dispatched max_trigger : int | float Max amount of time this listener will be triggered. Attributes ---------- trigger_count: int Number of times this listener has been triggered \"\"\" event_type : str | Event callback : typing . Callable [ ... , typing . Awaitable [ typing . Any ]] max_trigger : int | float trigger_count : int = 0 def __call__ ( self , * args : typing . Any ) -> typing . Awaitable [ typing . Any ]: self . trigger_count += 1 return self . callback ( * args ) listener ( event , * , max_trigger = float ( 'inf' )) Creates a wyvern.events.EventListener object. Parameters: Name Type Description Default event str | Event The event to listen. required max_trigger int | float Maximum number of times this listener has to be triggered. float('inf') Returns: Type Description wyvern . events . EventListener A EventListener object. Source code in wyvern/events.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 def listener ( event : str | Event , * , max_trigger : int | float = float ( \"inf\" ) ) -> typing . Callable [[ typing . Callable [ ... , typing . Awaitable [ typing . Any ]]], EventListener ]: \"\"\"Creates a [wyvern.events.EventListener][] object. Parameters ---------- event: str | wyvern.events.Event The event to listen. max_trigger: int | float Maximum number of times this listener has to be triggered. Returns ------- wyvern.events.EventListener A EventListener object. \"\"\" def inner ( callback : typing . Callable [ ... , typing . Awaitable [ typing . Any ]]) -> EventListener : nonlocal event , max_trigger return EventListener ( event , callback , max_trigger , 0 ) return inner","title":"events"},{"location":"api_reference/events/#events","text":"","title":"Events"},{"location":"api_reference/events/#wyvern.events.Event","text":"Event Enums. Source code in wyvern/events.py 14 15 16 17 class Event : \"\"\"Event Enums.\"\"\" MESSAGE_CREATE = \"MESSAGE_CREATE\"","title":"Event"},{"location":"api_reference/events/#wyvern.events.EventHandler","text":"Event handler to deal with incoming events from the Gateway. Parameters: Name Type Description Default client wyvern . client . GatewayClient The client binded with the event handler. required Attributes: Name Type Description listeners dict [ str | [ wyvern . events . Event ], list [ wyvern . events . EventListener ]] A container for event listeners. Source code in wyvern/events.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 class EventHandler : \"\"\" Event handler to deal with incoming events from the Gateway. Parameters ---------- client : wyvern.client.GatewayClient The client binded with the event handler. Attributes ---------- listeners: dict[str | [wyvern.events.Event], list[wyvern.events.EventListener]] A container for event listeners. \"\"\" listeners : dict [ str | Event , list [ EventListener ]] = {} def __new__ ( cls : type [ \"EventHandler\" ], client : \"GatewayClient\" ) -> \"EventHandler\" : inst = super () . __new__ ( cls ) for _obj in cls . __mro__ : for item in _obj . __dict__ . values (): if isinstance ( item , EventListener ): inst . add_listener ( item ) return inst def __init__ ( self , client : \"GatewayClient\" ) -> None : self . client = client def listen ( self ) -> typing . Callable [[ EventListener ], EventListener ]: \"\"\" This decorator adds a listener object to the handler's container Example ------- >>> import wyvern >>> >>> client = wyvern.GatewayClient(\"TOKEN\") >>> >>> @client.event_handler.listen() >>> @wyvern.listener(wyvern.Event.MESSAGE_CREATE) >>> async def message_create(message: wyvern.Message) -> None: >>> ... >>> >>> client.run() Returns ------- wyvern.events.EventListener The listener that was created using @listener decorator. \"\"\" def inner ( listener_obj : EventListener ) -> EventListener : self . add_listener ( listener_obj ) return listener_obj return inner def add_listener ( self , listener : EventListener ) -> None : self . listeners . setdefault ( listener . event_type , []) . append ( listener ) def dispatch ( self , event : str , * args : typing . Any ) -> None : \"\"\" Dispatches events from the gateway. This method runs all the listeners registered in the container for the specific event. Parameters ---------- event: str Name of the event to be dispatched. *args: tuple[typing.Any, ...] Arguments to provide in callbacks. \"\"\" invokes = [ ( listener ( self , * args ) if ( len ( str ( listener . callback ) . split ( \".\" )) > 1 ) else listener ( * args )) for listener in self . listeners . get ( event , []) if listener . max_trigger > listener . trigger_count ] asyncio . gather ( * invokes )","title":"EventHandler"},{"location":"api_reference/events/#wyvern.events.EventHandler.dispatch","text":"Dispatches events from the gateway. This method runs all the listeners registered in the container for the specific event. Parameters: Name Type Description Default event str Name of the event to be dispatched. required *args typing . Any Arguments to provide in callbacks. () Source code in wyvern/events.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def dispatch ( self , event : str , * args : typing . Any ) -> None : \"\"\" Dispatches events from the gateway. This method runs all the listeners registered in the container for the specific event. Parameters ---------- event: str Name of the event to be dispatched. *args: tuple[typing.Any, ...] Arguments to provide in callbacks. \"\"\" invokes = [ ( listener ( self , * args ) if ( len ( str ( listener . callback ) . split ( \".\" )) > 1 ) else listener ( * args )) for listener in self . listeners . get ( event , []) if listener . max_trigger > listener . trigger_count ] asyncio . gather ( * invokes )","title":"dispatch()"},{"location":"api_reference/events/#wyvern.events.EventHandler.listen","text":"This decorator adds a listener object to the handler's container","title":"listen()"},{"location":"api_reference/events/#wyvern.events.EventHandler.listen--example","text":">>> import wyvern >>> >>> client = wyvern.GatewayClient(\"TOKEN\") >>> >>> @client.event_handler.listen() >>> @wyvern.listener(wyvern.Event.MESSAGE_CREATE) >>> async def message_create(message: wyvern.Message) -> None: >>> ... >>> >>> client.run() Returns: Type Description wyvern . events . EventListener The listener that was created using @listener decorator. Source code in wyvern/events.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def listen ( self ) -> typing . Callable [[ EventListener ], EventListener ]: \"\"\" This decorator adds a listener object to the handler's container Example ------- >>> import wyvern >>> >>> client = wyvern.GatewayClient(\"TOKEN\") >>> >>> @client.event_handler.listen() >>> @wyvern.listener(wyvern.Event.MESSAGE_CREATE) >>> async def message_create(message: wyvern.Message) -> None: >>> ... >>> >>> client.run() Returns ------- wyvern.events.EventListener The listener that was created using @listener decorator. \"\"\" def inner ( listener_obj : EventListener ) -> EventListener : self . add_listener ( listener_obj ) return listener_obj return inner","title":"Example"},{"location":"api_reference/events/#wyvern.events.EventListener","text":"Class representating a callable to be called when a specific event type is dispatched. Parameters: Name Type Description Default event_type str | wyvern . events . Event The type of event this listener belongs to. required callback typing . Callable [..., typing . Awaitable [ typing . Any ]] The coroutine to run when event is dispatched required max_trigger int | float Max amount of time this listener will be triggered. required Attributes: Name Type Description trigger_count int Number of times this listener has been triggered Source code in wyvern/events.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 @attrs . define class EventListener : \"\"\" Class representating a callable to be called when a specific event type is dispatched. Parameters ---------- event_type : str | wyvern.events.Event The type of event this listener belongs to. callback : typing.Callable[..., typing.Awaitable[typing.Any]] The coroutine to run when event is dispatched max_trigger : int | float Max amount of time this listener will be triggered. Attributes ---------- trigger_count: int Number of times this listener has been triggered \"\"\" event_type : str | Event callback : typing . Callable [ ... , typing . Awaitable [ typing . Any ]] max_trigger : int | float trigger_count : int = 0 def __call__ ( self , * args : typing . Any ) -> typing . Awaitable [ typing . Any ]: self . trigger_count += 1 return self . callback ( * args )","title":"EventListener"},{"location":"api_reference/events/#wyvern.events.listener","text":"Creates a wyvern.events.EventListener object. Parameters: Name Type Description Default event str | Event The event to listen. required max_trigger int | float Maximum number of times this listener has to be triggered. float('inf') Returns: Type Description wyvern . events . EventListener A EventListener object. Source code in wyvern/events.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 def listener ( event : str | Event , * , max_trigger : int | float = float ( \"inf\" ) ) -> typing . Callable [[ typing . Callable [ ... , typing . Awaitable [ typing . Any ]]], EventListener ]: \"\"\"Creates a [wyvern.events.EventListener][] object. Parameters ---------- event: str | wyvern.events.Event The event to listen. max_trigger: int | float Maximum number of times this listener has to be triggered. Returns ------- wyvern.events.EventListener A EventListener object. \"\"\" def inner ( callback : typing . Callable [ ... , typing . Awaitable [ typing . Any ]]) -> EventListener : nonlocal event , max_trigger return EventListener ( event , callback , max_trigger , 0 ) return inner","title":"listener()"},{"location":"api_reference/intents/","text":"Intents Intents constructor to provide to the gateway. Attributes: Name Type Description value int The final value of intents generated by the constructor. Source code in wyvern/intents.pytyping . final class Intents : \"\"\" Intents constructor to provide to the gateway. Attributes ---------- value: int The final value of intents generated by the constructor. \"\"\" value : int NONE = 0 \"\"\" No intents. \"\"\" GUILDS = 1 << 0 \"\"\"Required for these gateway events: * `GUILD_CREATE` * `GUILD_UPDATE` * `GUILD_DELETE` * `GUILD_ROLE_CREATE` * `GUILD_ROLE_UPDATE` * `GUILD_ROLE_DELETE` * `CHANNEL_CREATE` * `CHANNEL_UPDATE` * `CHANNEL_DELETE` * `CHANNEL_PINS_UPDATE` * `THREAD_CREATE` * `THREAD_UPDATE` * `THREAD_DELETE` * `THREAD_LIST_SYNC` * `THREAD_MEMBER_UPDATE` * `THREAD_MEMBERS_UPDATE` * `STAGE_INSTANCE_CREATE` * `STAGE_INSTANCE_UPDATE` * `STAGE_INSTANCE_DELETE` \"\"\" GUILD_MEMBERS = 1 << 1 \"\"\"Required for these gateway events: * `GUILD_MEMBER_ADD` * `GUILD_MEMBER_UPDATE` * `GUILD_MEMBER_REMOVE` * `THREAD_MEMBERS_UPDATE` !!! note This is a privileged intent. \"\"\" GUILD_BANS = 1 << 2 \"\"\"Required for these gateway events: * `GUILD_BAN_ADD` * `GUILD_BAN_REMOVE` \"\"\" GUILD_EMOJIS = 1 << 3 \"\"\"Required for these gateway events: * `GUILD_EMOJIS_UPDATE` * `GUILD_STICKERS_UPDATE` \"\"\" GUILD_INTEGRATIONS = 1 << 4 \"\"\"Required for these gateway events: * `GUILD_INTEGRATIONS_UPDATE` * `INTEGRATION_CREATE` * `INTEGRATION_UPDATE` * `INTEGRATION_DELETE` \"\"\" GUILD_WEBHOOKS = 1 << 5 \"\"\"Required for these gateway events: * `WEBHOOKS_UPDATE` \"\"\" GUILD_INVITES = 1 << 6 \"\"\"Required for these gateway events: * `INVITE_CREATE` * `INVITE_DELETE` \"\"\" GUILD_VOICE_STATES = 1 << 7 \"\"\"Required for these gateway events: * `VOICE_STATE_UPDATE` \"\"\" GUILD_PRESENCES = 1 << 8 \"\"\"Required for these gateway events: * `PRESENCE_UPDATE` !!! note This is a privileged intent. \"\"\" GUILD_MESSAGES = 1 << 9 \"\"\"Required for these gateway events: * `MESSAGE_CREATE` * `MESSAGE_UPDATE` * `MESSAGE_DELETE` * `MESSAGE_DELETE_BULK` \"\"\" GUILD_MESSAGE_REACTIONS = 1 << 10 \"\"\"Required for these gateway events: * `MESSAGE_REACTION_ADD` * `MESSAGE_REACTION_REMOVE` * `MESSAGE_REACTION_REMOVE_ALL` * `MESSAGE_REACTION_REMOVE_EMOJI` \"\"\" GUILD_MESSAGE_TYPING = 1 << 11 \"\"\"Required for these gateway events: * `TYPING_START` \"\"\" DIRECT_MESSAGES = 1 << 12 \"\"\"Required for these gateway events: * `MESSAGE_CREATE` * `MESSAGE_UPDATE` * `MESSAGE_DELETE` * `CHANNEL_PINS_UPDATE` \"\"\" DIRECT_MESSAGE_REACTIONS = 1 << 13 \"\"\"Required for these gateway events: * `MESSAGE_REACTION_ADD` * `MESSAGE_REACTION_REMOVE` * `MESSAGE_REACTION_REMOVE_ALL` * `MESSAGE_REACTION_REMOVE_EMOJI` \"\"\" DIRECT_MESSAGE_TYPING = 1 << 14 \"\"\"Required for these gateway events: * `TYPING_START` \"\"\" MESSAGE_CONTENT = 1 << 15 \"\"\"Required for guild message's content. !!! note This is a privileged intent. \"\"\" GUILD_SCHEDULED_EVENTS = 1 << 16 \"\"\"Required for these gateway events: * `GUILD_SCHEDULED_EVENT_CREATE` * `GUILD_SCHEDULED_EVENT_UPDATE` * `GUILD_SCHEDULED_EVENT_DELETE` * `GUILD_SCHEDULED_EVENT_USER_ADD` * `GUILD_SCHEDULED_EVENT_USER_REMOVE` \"\"\" AUTO_MODERATION_CONFIGURATION = 1 << 20 \"\"\"Required for these gateway events: * `AUTO_MODERATION_RULE_CREATE` * `AUTO_MODERATION_RULE_UPDATE` * `AUTO_MODERATION_RULE_DELETE` \"\"\" AUTO_MODERATION_EXECUTION = 1 << 21 \"\"\"Required for these gateway events: * `AUTO_MODERATION_ACTION_EXECUTION` \"\"\" UNPRIVILEGED = ( GUILDS | GUILD_EMOJIS | GUILD_INTEGRATIONS | GUILD_WEBHOOKS | GUILD_INVITES | GUILD_VOICE_STATES | GUILD_MESSAGE_REACTIONS | GUILD_MESSAGE_TYPING | GUILD_MESSAGES | DIRECT_MESSAGES | DIRECT_MESSAGE_TYPING | DIRECT_MESSAGE_REACTIONS | AUTO_MODERATION_CONFIGURATION | AUTO_MODERATION_EXECUTION ) \"\"\"All unprivileged intents.\"\"\" PRIVILEGED = MESSAGE_CONTENT | GUILD_MEMBERS | GUILD_PRESENCES \"\"\"All privileged intents.\"\"\" def __init__ ( self , value : int = NONE ) -> None : self . value = value def __int__ ( self ) -> int : return self . value AUTO_MODERATION_CONFIGURATION = 1 << 20 class-attribute Required for these gateway events: AUTO_MODERATION_RULE_CREATE AUTO_MODERATION_RULE_UPDATE AUTO_MODERATION_RULE_DELETE AUTO_MODERATION_EXECUTION = 1 << 21 class-attribute Required for these gateway events: AUTO_MODERATION_ACTION_EXECUTION DIRECT_MESSAGES = 1 << 12 class-attribute Required for these gateway events: MESSAGE_CREATE MESSAGE_UPDATE MESSAGE_DELETE CHANNEL_PINS_UPDATE DIRECT_MESSAGE_REACTIONS = 1 << 13 class-attribute Required for these gateway events: MESSAGE_REACTION_ADD MESSAGE_REACTION_REMOVE MESSAGE_REACTION_REMOVE_ALL MESSAGE_REACTION_REMOVE_EMOJI DIRECT_MESSAGE_TYPING = 1 << 14 class-attribute Required for these gateway events: TYPING_START GUILDS = 1 << 0 class-attribute Required for these gateway events: GUILD_CREATE GUILD_UPDATE GUILD_DELETE GUILD_ROLE_CREATE GUILD_ROLE_UPDATE GUILD_ROLE_DELETE CHANNEL_CREATE CHANNEL_UPDATE CHANNEL_DELETE CHANNEL_PINS_UPDATE THREAD_CREATE THREAD_UPDATE THREAD_DELETE THREAD_LIST_SYNC THREAD_MEMBER_UPDATE THREAD_MEMBERS_UPDATE STAGE_INSTANCE_CREATE STAGE_INSTANCE_UPDATE STAGE_INSTANCE_DELETE GUILD_BANS = 1 << 2 class-attribute Required for these gateway events: GUILD_BAN_ADD GUILD_BAN_REMOVE GUILD_EMOJIS = 1 << 3 class-attribute Required for these gateway events: GUILD_EMOJIS_UPDATE GUILD_STICKERS_UPDATE GUILD_INTEGRATIONS = 1 << 4 class-attribute Required for these gateway events: GUILD_INTEGRATIONS_UPDATE INTEGRATION_CREATE INTEGRATION_UPDATE INTEGRATION_DELETE GUILD_INVITES = 1 << 6 class-attribute Required for these gateway events: INVITE_CREATE INVITE_DELETE GUILD_MEMBERS = 1 << 1 class-attribute Required for these gateway events: GUILD_MEMBER_ADD GUILD_MEMBER_UPDATE GUILD_MEMBER_REMOVE THREAD_MEMBERS_UPDATE !!! note This is a privileged intent. GUILD_MESSAGES = 1 << 9 class-attribute Required for these gateway events: MESSAGE_CREATE MESSAGE_UPDATE MESSAGE_DELETE MESSAGE_DELETE_BULK GUILD_MESSAGE_REACTIONS = 1 << 10 class-attribute Required for these gateway events: MESSAGE_REACTION_ADD MESSAGE_REACTION_REMOVE MESSAGE_REACTION_REMOVE_ALL MESSAGE_REACTION_REMOVE_EMOJI GUILD_MESSAGE_TYPING = 1 << 11 class-attribute Required for these gateway events: TYPING_START GUILD_PRESENCES = 1 << 8 class-attribute Required for these gateway events: PRESENCE_UPDATE !!! note This is a privileged intent. GUILD_SCHEDULED_EVENTS = 1 << 16 class-attribute Required for these gateway events: GUILD_SCHEDULED_EVENT_CREATE GUILD_SCHEDULED_EVENT_UPDATE GUILD_SCHEDULED_EVENT_DELETE GUILD_SCHEDULED_EVENT_USER_ADD GUILD_SCHEDULED_EVENT_USER_REMOVE GUILD_VOICE_STATES = 1 << 7 class-attribute Required for these gateway events: VOICE_STATE_UPDATE GUILD_WEBHOOKS = 1 << 5 class-attribute Required for these gateway events: WEBHOOKS_UPDATE MESSAGE_CONTENT = 1 << 15 class-attribute Required for guild message's content. !!! note This is a privileged intent. NONE = 0 class-attribute No intents. PRIVILEGED = MESSAGE_CONTENT | GUILD_MEMBERS | GUILD_PRESENCES class-attribute All privileged intents. UNPRIVILEGED = GUILDS | GUILD_EMOJIS | GUILD_INTEGRATIONS | GUILD_WEBHOOKS | GUILD_INVITES | GUILD_VOICE_STATES | GUILD_MESSAGE_REACTIONS | GUILD_MESSAGE_TYPING | GUILD_MESSAGES | DIRECT_MESSAGES | DIRECT_MESSAGE_TYPING | DIRECT_MESSAGE_REACTIONS | AUTO_MODERATION_CONFIGURATION | AUTO_MODERATION_EXECUTION class-attribute All unprivileged intents.","title":"intents"},{"location":"api_reference/intents/#wyvern.intents.Intents","text":"Intents constructor to provide to the gateway. Attributes: Name Type Description value int The final value of intents generated by the constructor. Source code in wyvern/intents.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 @typing . final class Intents : \"\"\" Intents constructor to provide to the gateway. Attributes ---------- value: int The final value of intents generated by the constructor. \"\"\" value : int NONE = 0 \"\"\" No intents. \"\"\" GUILDS = 1 << 0 \"\"\"Required for these gateway events: * `GUILD_CREATE` * `GUILD_UPDATE` * `GUILD_DELETE` * `GUILD_ROLE_CREATE` * `GUILD_ROLE_UPDATE` * `GUILD_ROLE_DELETE` * `CHANNEL_CREATE` * `CHANNEL_UPDATE` * `CHANNEL_DELETE` * `CHANNEL_PINS_UPDATE` * `THREAD_CREATE` * `THREAD_UPDATE` * `THREAD_DELETE` * `THREAD_LIST_SYNC` * `THREAD_MEMBER_UPDATE` * `THREAD_MEMBERS_UPDATE` * `STAGE_INSTANCE_CREATE` * `STAGE_INSTANCE_UPDATE` * `STAGE_INSTANCE_DELETE` \"\"\" GUILD_MEMBERS = 1 << 1 \"\"\"Required for these gateway events: * `GUILD_MEMBER_ADD` * `GUILD_MEMBER_UPDATE` * `GUILD_MEMBER_REMOVE` * `THREAD_MEMBERS_UPDATE` !!! note This is a privileged intent. \"\"\" GUILD_BANS = 1 << 2 \"\"\"Required for these gateway events: * `GUILD_BAN_ADD` * `GUILD_BAN_REMOVE` \"\"\" GUILD_EMOJIS = 1 << 3 \"\"\"Required for these gateway events: * `GUILD_EMOJIS_UPDATE` * `GUILD_STICKERS_UPDATE` \"\"\" GUILD_INTEGRATIONS = 1 << 4 \"\"\"Required for these gateway events: * `GUILD_INTEGRATIONS_UPDATE` * `INTEGRATION_CREATE` * `INTEGRATION_UPDATE` * `INTEGRATION_DELETE` \"\"\" GUILD_WEBHOOKS = 1 << 5 \"\"\"Required for these gateway events: * `WEBHOOKS_UPDATE` \"\"\" GUILD_INVITES = 1 << 6 \"\"\"Required for these gateway events: * `INVITE_CREATE` * `INVITE_DELETE` \"\"\" GUILD_VOICE_STATES = 1 << 7 \"\"\"Required for these gateway events: * `VOICE_STATE_UPDATE` \"\"\" GUILD_PRESENCES = 1 << 8 \"\"\"Required for these gateway events: * `PRESENCE_UPDATE` !!! note This is a privileged intent. \"\"\" GUILD_MESSAGES = 1 << 9 \"\"\"Required for these gateway events: * `MESSAGE_CREATE` * `MESSAGE_UPDATE` * `MESSAGE_DELETE` * `MESSAGE_DELETE_BULK` \"\"\" GUILD_MESSAGE_REACTIONS = 1 << 10 \"\"\"Required for these gateway events: * `MESSAGE_REACTION_ADD` * `MESSAGE_REACTION_REMOVE` * `MESSAGE_REACTION_REMOVE_ALL` * `MESSAGE_REACTION_REMOVE_EMOJI` \"\"\" GUILD_MESSAGE_TYPING = 1 << 11 \"\"\"Required for these gateway events: * `TYPING_START` \"\"\" DIRECT_MESSAGES = 1 << 12 \"\"\"Required for these gateway events: * `MESSAGE_CREATE` * `MESSAGE_UPDATE` * `MESSAGE_DELETE` * `CHANNEL_PINS_UPDATE` \"\"\" DIRECT_MESSAGE_REACTIONS = 1 << 13 \"\"\"Required for these gateway events: * `MESSAGE_REACTION_ADD` * `MESSAGE_REACTION_REMOVE` * `MESSAGE_REACTION_REMOVE_ALL` * `MESSAGE_REACTION_REMOVE_EMOJI` \"\"\" DIRECT_MESSAGE_TYPING = 1 << 14 \"\"\"Required for these gateway events: * `TYPING_START` \"\"\" MESSAGE_CONTENT = 1 << 15 \"\"\"Required for guild message's content. !!! note This is a privileged intent. \"\"\" GUILD_SCHEDULED_EVENTS = 1 << 16 \"\"\"Required for these gateway events: * `GUILD_SCHEDULED_EVENT_CREATE` * `GUILD_SCHEDULED_EVENT_UPDATE` * `GUILD_SCHEDULED_EVENT_DELETE` * `GUILD_SCHEDULED_EVENT_USER_ADD` * `GUILD_SCHEDULED_EVENT_USER_REMOVE` \"\"\" AUTO_MODERATION_CONFIGURATION = 1 << 20 \"\"\"Required for these gateway events: * `AUTO_MODERATION_RULE_CREATE` * `AUTO_MODERATION_RULE_UPDATE` * `AUTO_MODERATION_RULE_DELETE` \"\"\" AUTO_MODERATION_EXECUTION = 1 << 21 \"\"\"Required for these gateway events: * `AUTO_MODERATION_ACTION_EXECUTION` \"\"\" UNPRIVILEGED = ( GUILDS | GUILD_EMOJIS | GUILD_INTEGRATIONS | GUILD_WEBHOOKS | GUILD_INVITES | GUILD_VOICE_STATES | GUILD_MESSAGE_REACTIONS | GUILD_MESSAGE_TYPING | GUILD_MESSAGES | DIRECT_MESSAGES | DIRECT_MESSAGE_TYPING | DIRECT_MESSAGE_REACTIONS | AUTO_MODERATION_CONFIGURATION | AUTO_MODERATION_EXECUTION ) \"\"\"All unprivileged intents.\"\"\" PRIVILEGED = MESSAGE_CONTENT | GUILD_MEMBERS | GUILD_PRESENCES \"\"\"All privileged intents.\"\"\" def __init__ ( self , value : int = NONE ) -> None : self . value = value def __int__ ( self ) -> int : return self . value","title":"Intents"},{"location":"api_reference/intents/#wyvern.intents.Intents.AUTO_MODERATION_CONFIGURATION","text":"Required for these gateway events: AUTO_MODERATION_RULE_CREATE AUTO_MODERATION_RULE_UPDATE AUTO_MODERATION_RULE_DELETE","title":"AUTO_MODERATION_CONFIGURATION"},{"location":"api_reference/intents/#wyvern.intents.Intents.AUTO_MODERATION_EXECUTION","text":"Required for these gateway events: AUTO_MODERATION_ACTION_EXECUTION","title":"AUTO_MODERATION_EXECUTION"},{"location":"api_reference/intents/#wyvern.intents.Intents.DIRECT_MESSAGES","text":"Required for these gateway events: MESSAGE_CREATE MESSAGE_UPDATE MESSAGE_DELETE CHANNEL_PINS_UPDATE","title":"DIRECT_MESSAGES"},{"location":"api_reference/intents/#wyvern.intents.Intents.DIRECT_MESSAGE_REACTIONS","text":"Required for these gateway events: MESSAGE_REACTION_ADD MESSAGE_REACTION_REMOVE MESSAGE_REACTION_REMOVE_ALL MESSAGE_REACTION_REMOVE_EMOJI","title":"DIRECT_MESSAGE_REACTIONS"},{"location":"api_reference/intents/#wyvern.intents.Intents.DIRECT_MESSAGE_TYPING","text":"Required for these gateway events: TYPING_START","title":"DIRECT_MESSAGE_TYPING"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILDS","text":"Required for these gateway events: GUILD_CREATE GUILD_UPDATE GUILD_DELETE GUILD_ROLE_CREATE GUILD_ROLE_UPDATE GUILD_ROLE_DELETE CHANNEL_CREATE CHANNEL_UPDATE CHANNEL_DELETE CHANNEL_PINS_UPDATE THREAD_CREATE THREAD_UPDATE THREAD_DELETE THREAD_LIST_SYNC THREAD_MEMBER_UPDATE THREAD_MEMBERS_UPDATE STAGE_INSTANCE_CREATE STAGE_INSTANCE_UPDATE STAGE_INSTANCE_DELETE","title":"GUILDS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_BANS","text":"Required for these gateway events: GUILD_BAN_ADD GUILD_BAN_REMOVE","title":"GUILD_BANS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_EMOJIS","text":"Required for these gateway events: GUILD_EMOJIS_UPDATE GUILD_STICKERS_UPDATE","title":"GUILD_EMOJIS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_INTEGRATIONS","text":"Required for these gateway events: GUILD_INTEGRATIONS_UPDATE INTEGRATION_CREATE INTEGRATION_UPDATE INTEGRATION_DELETE","title":"GUILD_INTEGRATIONS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_INVITES","text":"Required for these gateway events: INVITE_CREATE INVITE_DELETE","title":"GUILD_INVITES"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_MEMBERS","text":"Required for these gateway events: GUILD_MEMBER_ADD GUILD_MEMBER_UPDATE GUILD_MEMBER_REMOVE THREAD_MEMBERS_UPDATE !!! note This is a privileged intent.","title":"GUILD_MEMBERS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_MESSAGES","text":"Required for these gateway events: MESSAGE_CREATE MESSAGE_UPDATE MESSAGE_DELETE MESSAGE_DELETE_BULK","title":"GUILD_MESSAGES"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_MESSAGE_REACTIONS","text":"Required for these gateway events: MESSAGE_REACTION_ADD MESSAGE_REACTION_REMOVE MESSAGE_REACTION_REMOVE_ALL MESSAGE_REACTION_REMOVE_EMOJI","title":"GUILD_MESSAGE_REACTIONS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_MESSAGE_TYPING","text":"Required for these gateway events: TYPING_START","title":"GUILD_MESSAGE_TYPING"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_PRESENCES","text":"Required for these gateway events: PRESENCE_UPDATE !!! note This is a privileged intent.","title":"GUILD_PRESENCES"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_SCHEDULED_EVENTS","text":"Required for these gateway events: GUILD_SCHEDULED_EVENT_CREATE GUILD_SCHEDULED_EVENT_UPDATE GUILD_SCHEDULED_EVENT_DELETE GUILD_SCHEDULED_EVENT_USER_ADD GUILD_SCHEDULED_EVENT_USER_REMOVE","title":"GUILD_SCHEDULED_EVENTS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_VOICE_STATES","text":"Required for these gateway events: VOICE_STATE_UPDATE","title":"GUILD_VOICE_STATES"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_WEBHOOKS","text":"Required for these gateway events: WEBHOOKS_UPDATE","title":"GUILD_WEBHOOKS"},{"location":"api_reference/intents/#wyvern.intents.Intents.MESSAGE_CONTENT","text":"Required for guild message's content. !!! note This is a privileged intent.","title":"MESSAGE_CONTENT"},{"location":"api_reference/intents/#wyvern.intents.Intents.NONE","text":"No intents.","title":"NONE"},{"location":"api_reference/intents/#wyvern.intents.Intents.PRIVILEGED","text":"All privileged intents.","title":"PRIVILEGED"},{"location":"api_reference/intents/#wyvern.intents.Intents.UNPRIVILEGED","text":"All unprivileged intents.","title":"UNPRIVILEGED"},{"location":"api_reference/rest/","text":"RESTClient RESTClient Source code in wyvern/rest/__init__.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 class RESTClient : def __init__ ( self , * , client : \"GatewayClient\" , token : str , api_version : int = 10 , client_session : aiohttp . ClientSession | None = None , ) -> None : self . _client = client self . _session : aiohttp . ClientSession self . _token = token self . _api_version = api_version self . _headers : typing . Dict [ str , multidict . istr ] = { \"Authorization\" : multidict . istr ( f \"Bot { token } \" )} if client_session is not None : self . _session = client_session async def _create_websocket ( self ) -> aiohttp . ClientWebSocketResponse : if getattr ( self , \"_session\" , None ) is None : self . _session = aiohttp . ClientSession ( headers = self . _headers ) return await self . _session . ws_connect ( f \"wss://gateway.discord.gg/?v= { self . _api_version } &encoding=json\" ) async def request ( self , route : RequestRoute ) -> typing . Any : headers = self . _headers . copy () headers [ \"Content-Type\" ] = multidict . istr ( \"application/json\" ) res = await self . _session . request ( route . type , route . url , headers = headers , json = route . json ) if res . status in ( 200 , 201 ): return await res . json () if res . status in ( 204 , 304 ): return else : raise HTTPException . with_code ( res . status , await res . text ()) async def fetch_client_user ( self ) -> BotUser : \"\"\" Fetch's the bot's user object. Returns: [BotUser] object representating the bot's user. \"\"\" try : res = await self . request ( RequestRoute ( Endpoints . fetch_client_user ())) except HTTPException as e : if e . code == 401 : raise Unauthorized ( \"Improper token passed.\" ) return converters . payload_to_botuser ( self . _client , res ) async def edit_client_user ( self , username : str | None = None , avatar : bytes | None = None ) -> BotUser : payload : dict [ str , bytes | str ] = {} if username is not None : payload [ \"username\" ] = username if avatar is not None : payload [ \"avatar\" ] = avatar res : dict [ str , int | str | bool ] = await self . request ( RequestRoute ( Endpoints . fetch_client_user (), type = \"PATCH\" , json = payload ) ) return converters . payload_to_botuser ( self . _client , res ) fetch_client_user () async Fetch's the bot's user object. Returns: [BotUser] object representating the bot's user. Source code in wyvern/rest/__init__.py 88 89 90 91 92 93 94 95 96 97 98 99 100 async def fetch_client_user ( self ) -> BotUser : \"\"\" Fetch's the bot's user object. Returns: [BotUser] object representating the bot's user. \"\"\" try : res = await self . request ( RequestRoute ( Endpoints . fetch_client_user ())) except HTTPException as e : if e . code == 401 : raise Unauthorized ( \"Improper token passed.\" ) return converters . payload_to_botuser ( self . _client , res )","title":"rest"},{"location":"api_reference/rest/#restclient","text":"","title":"RESTClient"},{"location":"api_reference/rest/#wyvern.rest.RESTClient","text":"Source code in wyvern/rest/__init__.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 class RESTClient : def __init__ ( self , * , client : \"GatewayClient\" , token : str , api_version : int = 10 , client_session : aiohttp . ClientSession | None = None , ) -> None : self . _client = client self . _session : aiohttp . ClientSession self . _token = token self . _api_version = api_version self . _headers : typing . Dict [ str , multidict . istr ] = { \"Authorization\" : multidict . istr ( f \"Bot { token } \" )} if client_session is not None : self . _session = client_session async def _create_websocket ( self ) -> aiohttp . ClientWebSocketResponse : if getattr ( self , \"_session\" , None ) is None : self . _session = aiohttp . ClientSession ( headers = self . _headers ) return await self . _session . ws_connect ( f \"wss://gateway.discord.gg/?v= { self . _api_version } &encoding=json\" ) async def request ( self , route : RequestRoute ) -> typing . Any : headers = self . _headers . copy () headers [ \"Content-Type\" ] = multidict . istr ( \"application/json\" ) res = await self . _session . request ( route . type , route . url , headers = headers , json = route . json ) if res . status in ( 200 , 201 ): return await res . json () if res . status in ( 204 , 304 ): return else : raise HTTPException . with_code ( res . status , await res . text ()) async def fetch_client_user ( self ) -> BotUser : \"\"\" Fetch's the bot's user object. Returns: [BotUser] object representating the bot's user. \"\"\" try : res = await self . request ( RequestRoute ( Endpoints . fetch_client_user ())) except HTTPException as e : if e . code == 401 : raise Unauthorized ( \"Improper token passed.\" ) return converters . payload_to_botuser ( self . _client , res ) async def edit_client_user ( self , username : str | None = None , avatar : bytes | None = None ) -> BotUser : payload : dict [ str , bytes | str ] = {} if username is not None : payload [ \"username\" ] = username if avatar is not None : payload [ \"avatar\" ] = avatar res : dict [ str , int | str | bool ] = await self . request ( RequestRoute ( Endpoints . fetch_client_user (), type = \"PATCH\" , json = payload ) ) return converters . payload_to_botuser ( self . _client , res )","title":"RESTClient"},{"location":"api_reference/rest/#wyvern.rest.RESTClient.fetch_client_user","text":"Fetch's the bot's user object. Returns: [BotUser] object representating the bot's user. Source code in wyvern/rest/__init__.py 88 89 90 91 92 93 94 95 96 97 98 99 100 async def fetch_client_user ( self ) -> BotUser : \"\"\" Fetch's the bot's user object. Returns: [BotUser] object representating the bot's user. \"\"\" try : res = await self . request ( RequestRoute ( Endpoints . fetch_client_user ())) except HTTPException as e : if e . code == 401 : raise Unauthorized ( \"Improper token passed.\" ) return converters . payload_to_botuser ( self . _client , res )","title":"fetch_client_user()"},{"location":"api_reference/constructors/embed/","text":"EmbedConstructor Creates an sendable disocrd embed. Parameters: Name Type Description Default name str Name of the embed. required description str Description of the embed None color int Color of the embed. 0 url str URL which the title points to. None timestamp datetime . datetime Timestamp to put in the embed. None Source code in wyvern/constructors/embed.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 class EmbedConstructor : \"\"\" Creates an sendable disocrd embed. Parameters ---------- name : str Name of the embed. description : str Description of the embed color : int Color of the embed. url : str URL which the title points to. timestamp : datetime.datetime Timestamp to put in the embed. \"\"\" _payload : dict [ str , typing . Any ] = { \"type\" : \"rich\" , \"fields\" : []} _title : str | None = None _description : str | None = None _color : int = 0 _url : str | None = None _timestamp : datetime . datetime | None = None def __init__ ( self , * , title : str | None = None , description : str | None = None , color : int = 0 , url : str | None = None , timestamp : datetime . datetime | None = None , ) -> None : self . _payload [ \"title\" ] = title self . _payload [ \"description\" ] = description self . _payload [ \"color\" ] = color self . _payload [ \"url\" ] = url self . _payload [ \"timestamp\" ] = timestamp @property def title ( self ) -> str | None : \"\"\"Title of the embed.\"\"\" return self . _payload . get ( \"title\" ) @property def description ( self ) -> str | None : \"\"\"Description of the embed.\"\"\" return self . _payload . get ( \"description\" ) @property def color ( self ) -> int : \"\"\"Colour of the embed.\"\"\" return self . _payload . get ( \"color\" , 0 ) @property def url ( self ) -> str | None : \"\"\"Embed's URL.\"\"\" return self . _payload . get ( \"url\" ) @property def timestamp ( self ) -> datetime . datetime | None : \"\"\"Timestamp of the embed.\"\"\" return datetime . datetime . fromtimestamp ( ts ) if ( ts := self . _payload . get ( \"timestamp\" )) else None def add_field ( self , * , name : str , value : str , inline : bool = True ) -> \"EmbedConstructor\" : \"\"\"Adds a field to the embed. Parameters ---------- name: str Name of the field. value: str Value of the filed inline: bool Weather the field is inline or not, defaults to [True][] Returns ------- wyvern.constructors.embed.EmbedConstructor The constructor. \"\"\" field = EmbedField ( name , value , inline ) self . _payload [ \"fields\" ] . append ( field . to_payload ()) return self def set_author ( self , * , name : str , url : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the author for the embed. Parameters ---------- name: str Name of the author field. url: str The URL author points to. icon_url: str URL for image to embed in the author. Returns ------- wyvern.constructors.embed.EmbedConstructor The constructor. \"\"\" author = EmbedAuthor ( name , url , icon_url ) self . _payload [ \"author\" ] = author . to_payload () return self def set_footer ( self , * , text : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the footer for the embed. Parameters ---------- text: str The text to appear in the footer icon_url: str URL for image to embed in the footer. Returns ------- wyvern.constructors.embed.EmbedConstructor The constructor. \"\"\" footer = EmbedFooter ( text , icon_url ) self . _payload [ \"footer\" ] = footer . to_payload () return self add_field ( * , name , value , inline = True ) Adds a field to the embed. Parameters: Name Type Description Default name str Name of the field. required value str Value of the filed required inline bool Weather the field is inline or not, defaults to True True Returns: Type Description wyvern . constructors . embed . EmbedConstructor The constructor. Source code in wyvern/constructors/embed.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def add_field ( self , * , name : str , value : str , inline : bool = True ) -> \"EmbedConstructor\" : \"\"\"Adds a field to the embed. Parameters ---------- name: str Name of the field. value: str Value of the filed inline: bool Weather the field is inline or not, defaults to [True][] Returns ------- wyvern.constructors.embed.EmbedConstructor The constructor. \"\"\" field = EmbedField ( name , value , inline ) self . _payload [ \"fields\" ] . append ( field . to_payload ()) return self color () property Colour of the embed. Source code in wyvern/constructors/embed.py 92 93 94 95 @property def color ( self ) -> int : \"\"\"Colour of the embed.\"\"\" return self . _payload . get ( \"color\" , 0 ) description () property Description of the embed. Source code in wyvern/constructors/embed.py 87 88 89 90 @property def description ( self ) -> str | None : \"\"\"Description of the embed.\"\"\" return self . _payload . get ( \"description\" ) set_author ( * , name , url , icon_url = None ) Set's the author for the embed. Parameters: Name Type Description Default name str Name of the author field. required url str The URL author points to. required icon_url str | None URL for image to embed in the author. None Returns: Type Description wyvern . constructors . embed . EmbedConstructor The constructor. Source code in wyvern/constructors/embed.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 def set_author ( self , * , name : str , url : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the author for the embed. Parameters ---------- name: str Name of the author field. url: str The URL author points to. icon_url: str URL for image to embed in the author. Returns ------- wyvern.constructors.embed.EmbedConstructor The constructor. \"\"\" author = EmbedAuthor ( name , url , icon_url ) self . _payload [ \"author\" ] = author . to_payload () return self set_footer ( * , text , icon_url = None ) Set's the footer for the embed. Parameters: Name Type Description Default text str The text to appear in the footer required icon_url str | None URL for image to embed in the footer. None Returns: Type Description wyvern . constructors . embed . EmbedConstructor The constructor. Source code in wyvern/constructors/embed.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 def set_footer ( self , * , text : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the footer for the embed. Parameters ---------- text: str The text to appear in the footer icon_url: str URL for image to embed in the footer. Returns ------- wyvern.constructors.embed.EmbedConstructor The constructor. \"\"\" footer = EmbedFooter ( text , icon_url ) self . _payload [ \"footer\" ] = footer . to_payload () return self timestamp () property Timestamp of the embed. Source code in wyvern/constructors/embed.py 102 103 104 105 @property def timestamp ( self ) -> datetime . datetime | None : \"\"\"Timestamp of the embed.\"\"\" return datetime . datetime . fromtimestamp ( ts ) if ( ts := self . _payload . get ( \"timestamp\" )) else None title () property Title of the embed. Source code in wyvern/constructors/embed.py 82 83 84 85 @property def title ( self ) -> str | None : \"\"\"Title of the embed.\"\"\" return self . _payload . get ( \"title\" ) url () property Embed's URL. Source code in wyvern/constructors/embed.py 97 98 99 100 @property def url ( self ) -> str | None : \"\"\"Embed's URL.\"\"\" return self . _payload . get ( \"url\" )","title":"embed"},{"location":"api_reference/constructors/embed/#wyvern.constructors.embed.EmbedConstructor","text":"Creates an sendable disocrd embed. Parameters: Name Type Description Default name str Name of the embed. required description str Description of the embed None color int Color of the embed. 0 url str URL which the title points to. None timestamp datetime . datetime Timestamp to put in the embed. None Source code in wyvern/constructors/embed.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 class EmbedConstructor : \"\"\" Creates an sendable disocrd embed. Parameters ---------- name : str Name of the embed. description : str Description of the embed color : int Color of the embed. url : str URL which the title points to. timestamp : datetime.datetime Timestamp to put in the embed. \"\"\" _payload : dict [ str , typing . Any ] = { \"type\" : \"rich\" , \"fields\" : []} _title : str | None = None _description : str | None = None _color : int = 0 _url : str | None = None _timestamp : datetime . datetime | None = None def __init__ ( self , * , title : str | None = None , description : str | None = None , color : int = 0 , url : str | None = None , timestamp : datetime . datetime | None = None , ) -> None : self . _payload [ \"title\" ] = title self . _payload [ \"description\" ] = description self . _payload [ \"color\" ] = color self . _payload [ \"url\" ] = url self . _payload [ \"timestamp\" ] = timestamp @property def title ( self ) -> str | None : \"\"\"Title of the embed.\"\"\" return self . _payload . get ( \"title\" ) @property def description ( self ) -> str | None : \"\"\"Description of the embed.\"\"\" return self . _payload . get ( \"description\" ) @property def color ( self ) -> int : \"\"\"Colour of the embed.\"\"\" return self . _payload . get ( \"color\" , 0 ) @property def url ( self ) -> str | None : \"\"\"Embed's URL.\"\"\" return self . _payload . get ( \"url\" ) @property def timestamp ( self ) -> datetime . datetime | None : \"\"\"Timestamp of the embed.\"\"\" return datetime . datetime . fromtimestamp ( ts ) if ( ts := self . _payload . get ( \"timestamp\" )) else None def add_field ( self , * , name : str , value : str , inline : bool = True ) -> \"EmbedConstructor\" : \"\"\"Adds a field to the embed. Parameters ---------- name: str Name of the field. value: str Value of the filed inline: bool Weather the field is inline or not, defaults to [True][] Returns ------- wyvern.constructors.embed.EmbedConstructor The constructor. \"\"\" field = EmbedField ( name , value , inline ) self . _payload [ \"fields\" ] . append ( field . to_payload ()) return self def set_author ( self , * , name : str , url : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the author for the embed. Parameters ---------- name: str Name of the author field. url: str The URL author points to. icon_url: str URL for image to embed in the author. Returns ------- wyvern.constructors.embed.EmbedConstructor The constructor. \"\"\" author = EmbedAuthor ( name , url , icon_url ) self . _payload [ \"author\" ] = author . to_payload () return self def set_footer ( self , * , text : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the footer for the embed. Parameters ---------- text: str The text to appear in the footer icon_url: str URL for image to embed in the footer. Returns ------- wyvern.constructors.embed.EmbedConstructor The constructor. \"\"\" footer = EmbedFooter ( text , icon_url ) self . _payload [ \"footer\" ] = footer . to_payload () return self","title":"EmbedConstructor"},{"location":"api_reference/constructors/embed/#wyvern.constructors.embed.EmbedConstructor.add_field","text":"Adds a field to the embed. Parameters: Name Type Description Default name str Name of the field. required value str Value of the filed required inline bool Weather the field is inline or not, defaults to True True Returns: Type Description wyvern . constructors . embed . EmbedConstructor The constructor. Source code in wyvern/constructors/embed.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def add_field ( self , * , name : str , value : str , inline : bool = True ) -> \"EmbedConstructor\" : \"\"\"Adds a field to the embed. Parameters ---------- name: str Name of the field. value: str Value of the filed inline: bool Weather the field is inline or not, defaults to [True][] Returns ------- wyvern.constructors.embed.EmbedConstructor The constructor. \"\"\" field = EmbedField ( name , value , inline ) self . _payload [ \"fields\" ] . append ( field . to_payload ()) return self","title":"add_field()"},{"location":"api_reference/constructors/embed/#wyvern.constructors.embed.EmbedConstructor.color","text":"Colour of the embed. Source code in wyvern/constructors/embed.py 92 93 94 95 @property def color ( self ) -> int : \"\"\"Colour of the embed.\"\"\" return self . _payload . get ( \"color\" , 0 )","title":"color()"},{"location":"api_reference/constructors/embed/#wyvern.constructors.embed.EmbedConstructor.description","text":"Description of the embed. Source code in wyvern/constructors/embed.py 87 88 89 90 @property def description ( self ) -> str | None : \"\"\"Description of the embed.\"\"\" return self . _payload . get ( \"description\" )","title":"description()"},{"location":"api_reference/constructors/embed/#wyvern.constructors.embed.EmbedConstructor.set_author","text":"Set's the author for the embed. Parameters: Name Type Description Default name str Name of the author field. required url str The URL author points to. required icon_url str | None URL for image to embed in the author. None Returns: Type Description wyvern . constructors . embed . EmbedConstructor The constructor. Source code in wyvern/constructors/embed.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 def set_author ( self , * , name : str , url : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the author for the embed. Parameters ---------- name: str Name of the author field. url: str The URL author points to. icon_url: str URL for image to embed in the author. Returns ------- wyvern.constructors.embed.EmbedConstructor The constructor. \"\"\" author = EmbedAuthor ( name , url , icon_url ) self . _payload [ \"author\" ] = author . to_payload () return self","title":"set_author()"},{"location":"api_reference/constructors/embed/#wyvern.constructors.embed.EmbedConstructor.set_footer","text":"Set's the footer for the embed. Parameters: Name Type Description Default text str The text to appear in the footer required icon_url str | None URL for image to embed in the footer. None Returns: Type Description wyvern . constructors . embed . EmbedConstructor The constructor. Source code in wyvern/constructors/embed.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 def set_footer ( self , * , text : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the footer for the embed. Parameters ---------- text: str The text to appear in the footer icon_url: str URL for image to embed in the footer. Returns ------- wyvern.constructors.embed.EmbedConstructor The constructor. \"\"\" footer = EmbedFooter ( text , icon_url ) self . _payload [ \"footer\" ] = footer . to_payload () return self","title":"set_footer()"},{"location":"api_reference/constructors/embed/#wyvern.constructors.embed.EmbedConstructor.timestamp","text":"Timestamp of the embed. Source code in wyvern/constructors/embed.py 102 103 104 105 @property def timestamp ( self ) -> datetime . datetime | None : \"\"\"Timestamp of the embed.\"\"\" return datetime . datetime . fromtimestamp ( ts ) if ( ts := self . _payload . get ( \"timestamp\" )) else None","title":"timestamp()"},{"location":"api_reference/constructors/embed/#wyvern.constructors.embed.EmbedConstructor.title","text":"Title of the embed. Source code in wyvern/constructors/embed.py 82 83 84 85 @property def title ( self ) -> str | None : \"\"\"Title of the embed.\"\"\" return self . _payload . get ( \"title\" )","title":"title()"},{"location":"api_reference/constructors/embed/#wyvern.constructors.embed.EmbedConstructor.url","text":"Embed's URL. Source code in wyvern/constructors/embed.py 97 98 99 100 @property def url ( self ) -> str | None : \"\"\"Embed's URL.\"\"\" return self . _payload . get ( \"url\" )","title":"url()"}]}