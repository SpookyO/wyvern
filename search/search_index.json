{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to wyvern's documentation. wyvern is a flexible and easy to use Discord API wrapper for python \ud83d\ude80. Why use wyvern? Feature rich API. Full control over the library's functionality. Built-in extensions for prefix commands. Interaction commands handling. Looking for examples? Check Examples out! Or continue with reading the API Reference .","title":"Getting Started"},{"location":"#welcome-to-wyverns-documentation","text":"wyvern is a flexible and easy to use Discord API wrapper for python \ud83d\ude80.","title":"Welcome to wyvern's documentation."},{"location":"#why-use-wyvern","text":"Feature rich API. Full control over the library's functionality. Built-in extensions for prefix commands. Interaction commands handling. Looking for examples? Check Examples out! Or continue with reading the API Reference .","title":"Why use wyvern?"},{"location":"api_reference/clients/","text":"The main bot class which acts as an interface between the Discord API and your bot. Parameters: Name Type Description Default token str The bot token to use. required intents typing . SupportsInt | wyvern . intents . Intents The intents to use while logging in to the gateway. Intents.UNPRIVILEGED event_handler type [ EventHandler ] A EventHandler subclass ( not instance ), if any. EventHandler rest_client RESTClient | None A custom RESTClient subclass to use, if any. None api_version int Discord API version to use. 10 client_session aiohttp . ClientSession | None ClientSession subclass to use, if any. None Source code in wyvern/clients.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 class GatewayClient : \"\"\"The main bot class which acts as an interface between the Discord API and your bot. Parameters ---------- token : str The bot token to use. intents : typing.SupportsInt | wyvern.intents.Intents The intents to use while logging in to the gateway. event_handler type[EventHandler] A EventHandler subclass ( not instance ), if any. rest_client : RESTClient | None A custom RESTClient subclass to use, if any. api_version : int Discord API version to use. client_session : aiohttp.ClientSession | None ClientSession subclass to use, if any. \"\"\" def __init__ ( self , token : str , * , intents : typing . SupportsInt | Intents = Intents . UNPRIVILEGED , event_handler : type [ EventHandler ] = EventHandler , rest_client : RESTClient | None = None , api_version : int = 10 , client_session : \"aiohttp.ClientSession\" | None = None , ) -> None : self . event_handler = event_handler ( self ) self . rest = rest_client or RESTClient ( client = self , token = token , api_version = api_version , client_session = client_session ) self . intents = intents if isinstance ( intents , Intents ) else Intents ( int ( intents )) self . gateway = Gateway ( self ) def listener ( self , event : str | Event , * , max_trigger : int | float = float ( \"inf\" ) ) -> typing . Callable [[ typing . Callable [ ... , typing . Awaitable [ typing . Any ]]], EventListener ]: \"\"\" Creates and adds a new listenet to the client's event handler. Parameters ---------- event: str | wyvern.events.Event The event to listen. max_trigger: int | float Maximum number of times this listener has to be triggered. Returns ------- wyvern.events.EventListener A EventListener object. Example ------- import wyvern client = wyvern.GatewayClient(\"TOKEN\") @client.listener(wyvern.Event.MESSAGE_CREATE) async def message_create(message: wyvern.Message) -> None: if message.content == \".ping\": await message.reply(\"pong\") client.run() \"\"\" def inner ( callback : typing . Callable [ ... , typing . Awaitable [ typing . Any ]]) -> EventListener : lsnr = listener ( event , max_trigger = max_trigger )( callback ) self . event_handler . add_listener ( lsnr ) return lsnr return inner async def start ( self ) -> None : \"\"\"Connects the bot with gateway and starts listening to events.\"\"\" await self . gateway . _get_socket_ready () _LOGGER . debug ( \"Logging in with static token.\" ) try : await self . rest . fetch_client_user () await self . gateway . listen_gateway () except Unauthorized as e : await self . rest . _session . close () raise e def run ( self ) -> None : \"\"\"A non-async method which call [wyvern.clients.GatewayClient.start][].\"\"\" loop = asyncio . get_event_loop () loop . run_until_complete ( self . start ()) listener ( event , * , max_trigger = float ( 'inf' )) Creates and adds a new listenet to the client's event handler. Parameters: Name Type Description Default event str | Event The event to listen. required max_trigger int | float Maximum number of times this listener has to be triggered. float('inf') Returns: Type Description wyvern . events . EventListener A EventListener object. Example import wyvern client = wyvern.GatewayClient(\"TOKEN\") @client.listener(wyvern.Event.MESSAGE_CREATE) async def message_create(message: wyvern.Message) -> None: if message.content == \".ping\": await message.reply(\"pong\") client.run() Source code in wyvern/clients.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def listener ( self , event : str | Event , * , max_trigger : int | float = float ( \"inf\" ) ) -> typing . Callable [[ typing . Callable [ ... , typing . Awaitable [ typing . Any ]]], EventListener ]: \"\"\" Creates and adds a new listenet to the client's event handler. Parameters ---------- event: str | wyvern.events.Event The event to listen. max_trigger: int | float Maximum number of times this listener has to be triggered. Returns ------- wyvern.events.EventListener A EventListener object. Example ------- import wyvern client = wyvern.GatewayClient(\"TOKEN\") @client.listener(wyvern.Event.MESSAGE_CREATE) async def message_create(message: wyvern.Message) -> None: if message.content == \".ping\": await message.reply(\"pong\") client.run() \"\"\" def inner ( callback : typing . Callable [ ... , typing . Awaitable [ typing . Any ]]) -> EventListener : lsnr = listener ( event , max_trigger = max_trigger )( callback ) self . event_handler . add_listener ( lsnr ) return lsnr return inner run () A non-async method which call wyvern.clients.GatewayClient.start . Source code in wyvern/clients.py 136 137 138 139 def run ( self ) -> None : \"\"\"A non-async method which call [wyvern.clients.GatewayClient.start][].\"\"\" loop = asyncio . get_event_loop () loop . run_until_complete ( self . start ()) start () async Connects the bot with gateway and starts listening to events. Source code in wyvern/clients.py 124 125 126 127 128 129 130 131 132 133 134 async def start ( self ) -> None : \"\"\"Connects the bot with gateway and starts listening to events.\"\"\" await self . gateway . _get_socket_ready () _LOGGER . debug ( \"Logging in with static token.\" ) try : await self . rest . fetch_client_user () await self . gateway . listen_gateway () except Unauthorized as e : await self . rest . _session . close () raise e","title":"clients"},{"location":"api_reference/clients/#wyvern.clients.GatewayClient.listener","text":"Creates and adds a new listenet to the client's event handler. Parameters: Name Type Description Default event str | Event The event to listen. required max_trigger int | float Maximum number of times this listener has to be triggered. float('inf') Returns: Type Description wyvern . events . EventListener A EventListener object.","title":"listener()"},{"location":"api_reference/clients/#wyvern.clients.GatewayClient.listener--example","text":"import wyvern client = wyvern.GatewayClient(\"TOKEN\") @client.listener(wyvern.Event.MESSAGE_CREATE) async def message_create(message: wyvern.Message) -> None: if message.content == \".ping\": await message.reply(\"pong\") client.run() Source code in wyvern/clients.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def listener ( self , event : str | Event , * , max_trigger : int | float = float ( \"inf\" ) ) -> typing . Callable [[ typing . Callable [ ... , typing . Awaitable [ typing . Any ]]], EventListener ]: \"\"\" Creates and adds a new listenet to the client's event handler. Parameters ---------- event: str | wyvern.events.Event The event to listen. max_trigger: int | float Maximum number of times this listener has to be triggered. Returns ------- wyvern.events.EventListener A EventListener object. Example ------- import wyvern client = wyvern.GatewayClient(\"TOKEN\") @client.listener(wyvern.Event.MESSAGE_CREATE) async def message_create(message: wyvern.Message) -> None: if message.content == \".ping\": await message.reply(\"pong\") client.run() \"\"\" def inner ( callback : typing . Callable [ ... , typing . Awaitable [ typing . Any ]]) -> EventListener : lsnr = listener ( event , max_trigger = max_trigger )( callback ) self . event_handler . add_listener ( lsnr ) return lsnr return inner","title":"Example"},{"location":"api_reference/clients/#wyvern.clients.GatewayClient.run","text":"A non-async method which call wyvern.clients.GatewayClient.start . Source code in wyvern/clients.py 136 137 138 139 def run ( self ) -> None : \"\"\"A non-async method which call [wyvern.clients.GatewayClient.start][].\"\"\" loop = asyncio . get_event_loop () loop . run_until_complete ( self . start ())","title":"run()"},{"location":"api_reference/clients/#wyvern.clients.GatewayClient.start","text":"Connects the bot with gateway and starts listening to events. Source code in wyvern/clients.py 124 125 126 127 128 129 130 131 132 133 134 async def start ( self ) -> None : \"\"\"Connects the bot with gateway and starts listening to events.\"\"\" await self . gateway . _get_socket_ready () _LOGGER . debug ( \"Logging in with static token.\" ) try : await self . rest . fetch_client_user () await self . gateway . listen_gateway () except Unauthorized as e : await self . rest . _session . close () raise e","title":"start()"},{"location":"api_reference/colors/","text":"Color Class representing a color in the RGB color space. Alias name Colour exists for convenience. Attributes: Name Type Description value int The value of the color. This is a 24-bit integer, where the first 8 bits are the red value, the next 8 bits are the green value, and the last 8 bits are the blue value. Source code in wyvern/colors.pytyping . final class Color : \"\"\" Class representing a color in the RGB color space. Alias name Colour exists for convenience. Attributes ---------- value : int The value of the color. This is a 24-bit integer, where the first 8 bits are the red value, the next 8 bits are the green value, and the last 8 bits are the blue value. \"\"\" __slots__ : tuple [ str , ... ] = ( \"value\" ,) RGB_REGEX : re . Pattern [ str ] = re . compile ( r \"rgb\\((\\d{1,3}), (\\d{1,3}), (\\d{1,3})\\)\" ) HSL_REGEX : re . Pattern [ str ] = re . compile ( r \"hsl\\((\\d{1,3}), (\\d{1,3})%, (\\d{1,3})%\\)\" ) HSV_REGEX : re . Pattern [ str ] = re . compile ( r \"hsv\\((\\d{1,3}), (\\d{1,3})%, (\\d{1,3})%\\)\" ) HEX_REGEX : re . Pattern [ str ] = re . compile ( r \"#([0-9a-fA-F] {3} |[0-9a-fA-F] {6} )\" ) def __init__ ( self , value : int ) -> None : self . value = value def __repr__ ( self ) -> str : return f \"Color( { self . value } )\" def __eq__ ( self , other : object ) -> bool : return isinstance ( other , Color ) and self . value == other . value def __hash__ ( self ) -> int : return hash ( self . value ) def __ne__ ( self , other : object ) -> bool : return self is not other @classmethod def from_hex ( cls , hex_value : str ) -> Color : \"\"\" Creates a Color object from a hex value. Parameters ---------- hex_value: str The hex value to use. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_hex('#ff0000') Color(16776960) >>> Color.from_hex('#00ff00') Color(255) >>> Color.from_hex('#0000ff') Color(0) \"\"\" if match := cls . HEX_REGEX . match ( hex_value ): hex_value = match . group ( 1 ) if len ( hex_value ) == 3 : hex_value = \"\" . join ( c * 2 for c in hex_value ) return cls ( int ( hex_value , 16 )) raise ValueError ( f \"Invalid hex value: { hex_value } \" ) @classmethod def from_rgb ( cls , r : int , g : int , b : int ) -> Color : \"\"\" Creates a Color object from RGB values. Parameters ---------- r: int The red value. g: int The green value. b: int The blue value. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_rgb(255, 0, 0) Color(16711680) >>> Color.from_rgb(0, 255, 0) Color(65280) >>> Color.from_rgb(0, 0, 255) Color(255) \"\"\" return cls (( r << 16 ) + ( g << 8 ) + b ) @classmethod def from_hsv ( cls , h : float , s : float , v : float ) -> Color : \"\"\" Creates a Color object from HSV values. Parameters ---------- h: float The hue value. s: float The saturation value. v: float The value in HSV color space. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_hsv(0, 1, 1) Color(16711680) >>> Color.from_hsv(120, 1, 1) Color(16711680) >>> Color.from_hsv(240, 1, 1) Color(16711680) \"\"\" return cls . from_rgb ( * [ int ( round ( c * 255 )) for c in colorsys . hsv_to_rgb ( h , s , v )]) @classmethod def from_hsl ( cls , h : float , s : float , l : float ) -> Color : \"\"\" Creates a Color object from HSL values. Parameters ---------- h: float The hue value. s: float The saturation value. l: float The lightness value. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_hsl(0, 1, 0.5) Color(16711680) >>> Color.from_hsl(120, 1, 0.5) Color(16711680) >>> Color.from_hsl(240, 1, 0.5) Color(16711680) \"\"\" return cls . from_rgb ( * [ int ( round ( c * 255 )) for c in colorsys . hls_to_rgb ( h , l , s )]) @classmethod def from_random ( cls ) -> Color : \"\"\" Creates a Color object from a random color. Randomly generates a color in the RGB color space. Returns ------- wyvern.Color A Color object. \"\"\" return cls . from_rgb ( * [ random . randint ( 0 , 255 ) for _ in range ( 3 )]) @classmethod def from_string ( cls , string : str ) -> Color : \"\"\" Creates a Color object from a string. Parameters ---------- string: str The string to use. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_string('rgb(255, 0, 0)') Color(16711680) >>> Color.from_string('hsl(0, 100%, 50%)') Color(-80727249750) >>> Color.from_string('hsv(0, 100%, 100%)') Color(1022371500) >>> Color.from_string('#ff0000') Color(16776960) \"\"\" if string . startswith ( \"#\" ): return cls . from_hex ( string ) elif match := cls . RGB_REGEX . match ( string ): return cls . from_rgb ( * [ int ( c ) for c in match . groups ()]) elif match := cls . HSL_REGEX . match ( string ): return cls . from_hsl ( * [ float ( c ) for c in match . groups ()]) elif match := cls . HSV_REGEX . match ( string ): return cls . from_hsv ( * [ float ( c ) for c in match . groups ()]) raise ValueError ( f \"Invalid color string: { string } \" ) @classmethod def default ( cls ) -> Color : \"\"\" Creates a Color object from the default color. This is `0x000000`. (Black) Examples -------- >>> Color.default() Color(0) \"\"\" return cls ( 0x000000 ) @property def hex ( self ) -> str : \"\"\"The hex value of the color.\"\"\" return f \"# { self . value : 06x } \" @property def rgb ( self ) -> tuple [ int , int , int ]: \"\"\"The RGB values of the color.\"\"\" return ( self . value >> 16 ) & 0xFF , ( self . value >> 8 ) & 0xFF , self . value & 0xFF @property def hsv ( self ) -> tuple [ float , float , float ]: \"\"\"The HSV values of the color.\"\"\" return colorsys . rgb_to_hsv ( * ( c / 255 for c in self . rgb )) @property def hsl ( self ) -> tuple [ float , float , float ]: \"\"\"The HSL values of the color.\"\"\" return colorsys . rgb_to_hls ( * ( c / 255 for c in self . rgb )) @property def r ( self ) -> int : \"\"\"The red value of the color.\"\"\" return self . rgb [ 0 ] @property def g ( self ) -> int : \"\"\"The green value of the color.\"\"\" return self . rgb [ 1 ] @property def b ( self ) -> int : \"\"\"The blue value of the color.\"\"\" return self . rgb [ 2 ] @classmethod def red ( cls ) -> Color : \"\"\"Creates a Color object from the red color. This is `0xff0000`. (Red)\"\"\" return cls ( 0xFF0000 ) @classmethod def green ( cls ) -> Color : \"\"\"Creates a Color object from the green color. This is `0x00ff00`. (Green)\"\"\" return cls ( 0x00FF00 ) @classmethod def blue ( cls ) -> Color : \"\"\"Creates a Color object from the blue color. This is `0x0000ff`. (Blue)\"\"\" return cls ( 0x0000FF ) @classmethod def yellow ( cls ) -> Color : \"\"\"Creates a Color object from the yellow color. This is `0xffff00`. (Yellow)\"\"\" return cls ( 0xFFFF00 ) @classmethod def cyan ( cls ) -> Color : \"\"\"Creates a Color object from the cyan color. This is `0x00ffff`. (Cyan)\"\"\" return cls ( 0x00FFFF ) @classmethod def magenta ( cls ) -> Color : \"\"\"Creates a Color object from the magenta color. This is `0xff00ff`. (Magenta)\"\"\" return cls ( 0xFF00FF ) @classmethod def black ( cls ) -> Color : \"\"\"Creates a Color object from the black color. This is `0x000000`. (Black)\"\"\" return cls ( 0x000000 ) @classmethod def white ( cls ) -> Color : \"\"\"Creates a Color object from the white color. This is `0xffffff`. (White)\"\"\" return cls ( 0xFFFFFF ) @classmethod def gray ( cls ) -> Color : \"\"\"Creates a Color object from the gray color. This is `0x808080`. (Gray)\"\"\" return cls ( 0x808080 ) @classmethod def grey ( cls ) -> Color : \"\"\"Creates a Color object from the grey color. This is `0x808080`. (Grey)\"\"\" return cls ( 0x808080 ) @classmethod def orange ( cls ) -> Color : \"\"\"Creates a Color object from the orange color. This is `0xffa500`. (Orange)\"\"\" return cls ( 0xFFA500 ) b () property The blue value of the color. Source code in wyvern/colors.py 274 275 276 277 @property def b ( self ) -> int : \"\"\"The blue value of the color.\"\"\" return self . rgb [ 2 ] black () classmethod Creates a Color object from the black color. This is 0x000000 . (Black) Source code in wyvern/colors.py 309 310 311 312 @classmethod def black ( cls ) -> Color : \"\"\"Creates a Color object from the black color. This is `0x000000`. (Black)\"\"\" return cls ( 0x000000 ) blue () classmethod Creates a Color object from the blue color. This is 0x0000ff . (Blue) Source code in wyvern/colors.py 289 290 291 292 @classmethod def blue ( cls ) -> Color : \"\"\"Creates a Color object from the blue color. This is `0x0000ff`. (Blue)\"\"\" return cls ( 0x0000FF ) cyan () classmethod Creates a Color object from the cyan color. This is 0x00ffff . (Cyan) Source code in wyvern/colors.py 299 300 301 302 @classmethod def cyan ( cls ) -> Color : \"\"\"Creates a Color object from the cyan color. This is `0x00ffff`. (Cyan)\"\"\" return cls ( 0x00FFFF ) default () classmethod Creates a Color object from the default color. This is 0x000000 . (Black) Examples: >>> Color.default() Color(0) Source code in wyvern/colors.py 230 231 232 233 234 235 236 237 238 239 240 241 242 @classmethod def default ( cls ) -> Color : \"\"\" Creates a Color object from the default color. This is `0x000000`. (Black) Examples -------- >>> Color.default() Color(0) \"\"\" return cls ( 0x000000 ) from_hex ( hex_value ) classmethod Creates a Color object from a hex value. Parameters: Name Type Description Default hex_value str The hex value to use. required Returns: Type Description wyvern . Color A Color object. Examples: >>> Color.from_hex('#ff0000') Color(16776960) >>> Color.from_hex('#00ff00') Color(255) >>> Color.from_hex('#0000ff') Color(0) Source code in wyvern/colors.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 @classmethod def from_hex ( cls , hex_value : str ) -> Color : \"\"\" Creates a Color object from a hex value. Parameters ---------- hex_value: str The hex value to use. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_hex('#ff0000') Color(16776960) >>> Color.from_hex('#00ff00') Color(255) >>> Color.from_hex('#0000ff') Color(0) \"\"\" if match := cls . HEX_REGEX . match ( hex_value ): hex_value = match . group ( 1 ) if len ( hex_value ) == 3 : hex_value = \"\" . join ( c * 2 for c in hex_value ) return cls ( int ( hex_value , 16 )) raise ValueError ( f \"Invalid hex value: { hex_value } \" ) from_hsl ( h , s , l ) classmethod Creates a Color object from HSL values. Parameters: Name Type Description Default h float The hue value. required s float The saturation value. required l float The lightness value. required Returns: Type Description wyvern . Color A Color object. Examples: >>> Color.from_hsl(0, 1, 0.5) Color(16711680) >>> Color.from_hsl(120, 1, 0.5) Color(16711680) >>> Color.from_hsl(240, 1, 0.5) Color(16711680) Source code in wyvern/colors.py 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 @classmethod def from_hsl ( cls , h : float , s : float , l : float ) -> Color : \"\"\" Creates a Color object from HSL values. Parameters ---------- h: float The hue value. s: float The saturation value. l: float The lightness value. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_hsl(0, 1, 0.5) Color(16711680) >>> Color.from_hsl(120, 1, 0.5) Color(16711680) >>> Color.from_hsl(240, 1, 0.5) Color(16711680) \"\"\" return cls . from_rgb ( * [ int ( round ( c * 255 )) for c in colorsys . hls_to_rgb ( h , l , s )]) from_hsv ( h , s , v ) classmethod Creates a Color object from HSV values. Parameters: Name Type Description Default h float The hue value. required s float The saturation value. required v float The value in HSV color space. required Returns: Type Description wyvern . Color A Color object. Examples: >>> Color.from_hsv(0, 1, 1) Color(16711680) >>> Color.from_hsv(120, 1, 1) Color(16711680) >>> Color.from_hsv(240, 1, 1) Color(16711680) Source code in wyvern/colors.py 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 @classmethod def from_hsv ( cls , h : float , s : float , v : float ) -> Color : \"\"\" Creates a Color object from HSV values. Parameters ---------- h: float The hue value. s: float The saturation value. v: float The value in HSV color space. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_hsv(0, 1, 1) Color(16711680) >>> Color.from_hsv(120, 1, 1) Color(16711680) >>> Color.from_hsv(240, 1, 1) Color(16711680) \"\"\" return cls . from_rgb ( * [ int ( round ( c * 255 )) for c in colorsys . hsv_to_rgb ( h , s , v )]) from_random () classmethod Creates a Color object from a random color. Randomly generates a color in the RGB color space. Returns: Type Description wyvern . Color A Color object. Source code in wyvern/colors.py 177 178 179 180 181 182 183 184 185 186 187 188 @classmethod def from_random ( cls ) -> Color : \"\"\" Creates a Color object from a random color. Randomly generates a color in the RGB color space. Returns ------- wyvern.Color A Color object. \"\"\" return cls . from_rgb ( * [ random . randint ( 0 , 255 ) for _ in range ( 3 )]) from_rgb ( r , g , b ) classmethod Creates a Color object from RGB values. Parameters: Name Type Description Default r int The red value. required g int The green value. required b int The blue value. required Returns: Type Description wyvern . Color A Color object. Examples: >>> Color.from_rgb(255, 0, 0) Color(16711680) >>> Color.from_rgb(0, 255, 0) Color(65280) >>> Color.from_rgb(0, 0, 255) Color(255) Source code in wyvern/colors.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 @classmethod def from_rgb ( cls , r : int , g : int , b : int ) -> Color : \"\"\" Creates a Color object from RGB values. Parameters ---------- r: int The red value. g: int The green value. b: int The blue value. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_rgb(255, 0, 0) Color(16711680) >>> Color.from_rgb(0, 255, 0) Color(65280) >>> Color.from_rgb(0, 0, 255) Color(255) \"\"\" return cls (( r << 16 ) + ( g << 8 ) + b ) from_string ( string ) classmethod Creates a Color object from a string. Parameters: Name Type Description Default string str The string to use. required Returns: Type Description wyvern . Color A Color object. Examples: >>> Color.from_string('rgb(255, 0, 0)') Color(16711680) >>> Color.from_string('hsl(0, 100%, 50%)') Color(-80727249750) >>> Color.from_string('hsv(0, 100%, 100%)') Color(1022371500) >>> Color.from_string('#ff0000') Color(16776960) Source code in wyvern/colors.py 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 @classmethod def from_string ( cls , string : str ) -> Color : \"\"\" Creates a Color object from a string. Parameters ---------- string: str The string to use. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_string('rgb(255, 0, 0)') Color(16711680) >>> Color.from_string('hsl(0, 100%, 50%)') Color(-80727249750) >>> Color.from_string('hsv(0, 100%, 100%)') Color(1022371500) >>> Color.from_string('#ff0000') Color(16776960) \"\"\" if string . startswith ( \"#\" ): return cls . from_hex ( string ) elif match := cls . RGB_REGEX . match ( string ): return cls . from_rgb ( * [ int ( c ) for c in match . groups ()]) elif match := cls . HSL_REGEX . match ( string ): return cls . from_hsl ( * [ float ( c ) for c in match . groups ()]) elif match := cls . HSV_REGEX . match ( string ): return cls . from_hsv ( * [ float ( c ) for c in match . groups ()]) raise ValueError ( f \"Invalid color string: { string } \" ) g () property The green value of the color. Source code in wyvern/colors.py 269 270 271 272 @property def g ( self ) -> int : \"\"\"The green value of the color.\"\"\" return self . rgb [ 1 ] gray () classmethod Creates a Color object from the gray color. This is 0x808080 . (Gray) Source code in wyvern/colors.py 319 320 321 322 @classmethod def gray ( cls ) -> Color : \"\"\"Creates a Color object from the gray color. This is `0x808080`. (Gray)\"\"\" return cls ( 0x808080 ) green () classmethod Creates a Color object from the green color. This is 0x00ff00 . (Green) Source code in wyvern/colors.py 284 285 286 287 @classmethod def green ( cls ) -> Color : \"\"\"Creates a Color object from the green color. This is `0x00ff00`. (Green)\"\"\" return cls ( 0x00FF00 ) grey () classmethod Creates a Color object from the grey color. This is 0x808080 . (Grey) Source code in wyvern/colors.py 324 325 326 327 @classmethod def grey ( cls ) -> Color : \"\"\"Creates a Color object from the grey color. This is `0x808080`. (Grey)\"\"\" return cls ( 0x808080 ) hex () property The hex value of the color. Source code in wyvern/colors.py 244 245 246 247 @property def hex ( self ) -> str : \"\"\"The hex value of the color.\"\"\" return f \"# { self . value : 06x } \" hsl () property The HSL values of the color. Source code in wyvern/colors.py 259 260 261 262 @property def hsl ( self ) -> tuple [ float , float , float ]: \"\"\"The HSL values of the color.\"\"\" return colorsys . rgb_to_hls ( * ( c / 255 for c in self . rgb )) hsv () property The HSV values of the color. Source code in wyvern/colors.py 254 255 256 257 @property def hsv ( self ) -> tuple [ float , float , float ]: \"\"\"The HSV values of the color.\"\"\" return colorsys . rgb_to_hsv ( * ( c / 255 for c in self . rgb )) magenta () classmethod Creates a Color object from the magenta color. This is 0xff00ff . (Magenta) Source code in wyvern/colors.py 304 305 306 307 @classmethod def magenta ( cls ) -> Color : \"\"\"Creates a Color object from the magenta color. This is `0xff00ff`. (Magenta)\"\"\" return cls ( 0xFF00FF ) orange () classmethod Creates a Color object from the orange color. This is 0xffa500 . (Orange) Source code in wyvern/colors.py 329 330 331 332 @classmethod def orange ( cls ) -> Color : \"\"\"Creates a Color object from the orange color. This is `0xffa500`. (Orange)\"\"\" return cls ( 0xFFA500 ) r () property The red value of the color. Source code in wyvern/colors.py 264 265 266 267 @property def r ( self ) -> int : \"\"\"The red value of the color.\"\"\" return self . rgb [ 0 ] red () classmethod Creates a Color object from the red color. This is 0xff0000 . (Red) Source code in wyvern/colors.py 279 280 281 282 @classmethod def red ( cls ) -> Color : \"\"\"Creates a Color object from the red color. This is `0xff0000`. (Red)\"\"\" return cls ( 0xFF0000 ) rgb () property The RGB values of the color. Source code in wyvern/colors.py 249 250 251 252 @property def rgb ( self ) -> tuple [ int , int , int ]: \"\"\"The RGB values of the color.\"\"\" return ( self . value >> 16 ) & 0xFF , ( self . value >> 8 ) & 0xFF , self . value & 0xFF white () classmethod Creates a Color object from the white color. This is 0xffffff . (White) Source code in wyvern/colors.py 314 315 316 317 @classmethod def white ( cls ) -> Color : \"\"\"Creates a Color object from the white color. This is `0xffffff`. (White)\"\"\" return cls ( 0xFFFFFF ) yellow () classmethod Creates a Color object from the yellow color. This is 0xffff00 . (Yellow) Source code in wyvern/colors.py 294 295 296 297 @classmethod def yellow ( cls ) -> Color : \"\"\"Creates a Color object from the yellow color. This is `0xffff00`. (Yellow)\"\"\" return cls ( 0xFFFF00 )","title":"colors"},{"location":"api_reference/colors/#wyvern.colors.Color","text":"Class representing a color in the RGB color space. Alias name Colour exists for convenience. Attributes: Name Type Description value int The value of the color. This is a 24-bit integer, where the first 8 bits are the red value, the next 8 bits are the green value, and the last 8 bits are the blue value. Source code in wyvern/colors.pytyping . final class Color : \"\"\" Class representing a color in the RGB color space. Alias name Colour exists for convenience. Attributes ---------- value : int The value of the color. This is a 24-bit integer, where the first 8 bits are the red value, the next 8 bits are the green value, and the last 8 bits are the blue value. \"\"\" __slots__ : tuple [ str , ... ] = ( \"value\" ,) RGB_REGEX : re . Pattern [ str ] = re . compile ( r \"rgb\\((\\d{1,3}), (\\d{1,3}), (\\d{1,3})\\)\" ) HSL_REGEX : re . Pattern [ str ] = re . compile ( r \"hsl\\((\\d{1,3}), (\\d{1,3})%, (\\d{1,3})%\\)\" ) HSV_REGEX : re . Pattern [ str ] = re . compile ( r \"hsv\\((\\d{1,3}), (\\d{1,3})%, (\\d{1,3})%\\)\" ) HEX_REGEX : re . Pattern [ str ] = re . compile ( r \"#([0-9a-fA-F] {3} |[0-9a-fA-F] {6} )\" ) def __init__ ( self , value : int ) -> None : self . value = value def __repr__ ( self ) -> str : return f \"Color( { self . value } )\" def __eq__ ( self , other : object ) -> bool : return isinstance ( other , Color ) and self . value == other . value def __hash__ ( self ) -> int : return hash ( self . value ) def __ne__ ( self , other : object ) -> bool : return self is not other @classmethod def from_hex ( cls , hex_value : str ) -> Color : \"\"\" Creates a Color object from a hex value. Parameters ---------- hex_value: str The hex value to use. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_hex('#ff0000') Color(16776960) >>> Color.from_hex('#00ff00') Color(255) >>> Color.from_hex('#0000ff') Color(0) \"\"\" if match := cls . HEX_REGEX . match ( hex_value ): hex_value = match . group ( 1 ) if len ( hex_value ) == 3 : hex_value = \"\" . join ( c * 2 for c in hex_value ) return cls ( int ( hex_value , 16 )) raise ValueError ( f \"Invalid hex value: { hex_value } \" ) @classmethod def from_rgb ( cls , r : int , g : int , b : int ) -> Color : \"\"\" Creates a Color object from RGB values. Parameters ---------- r: int The red value. g: int The green value. b: int The blue value. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_rgb(255, 0, 0) Color(16711680) >>> Color.from_rgb(0, 255, 0) Color(65280) >>> Color.from_rgb(0, 0, 255) Color(255) \"\"\" return cls (( r << 16 ) + ( g << 8 ) + b ) @classmethod def from_hsv ( cls , h : float , s : float , v : float ) -> Color : \"\"\" Creates a Color object from HSV values. Parameters ---------- h: float The hue value. s: float The saturation value. v: float The value in HSV color space. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_hsv(0, 1, 1) Color(16711680) >>> Color.from_hsv(120, 1, 1) Color(16711680) >>> Color.from_hsv(240, 1, 1) Color(16711680) \"\"\" return cls . from_rgb ( * [ int ( round ( c * 255 )) for c in colorsys . hsv_to_rgb ( h , s , v )]) @classmethod def from_hsl ( cls , h : float , s : float , l : float ) -> Color : \"\"\" Creates a Color object from HSL values. Parameters ---------- h: float The hue value. s: float The saturation value. l: float The lightness value. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_hsl(0, 1, 0.5) Color(16711680) >>> Color.from_hsl(120, 1, 0.5) Color(16711680) >>> Color.from_hsl(240, 1, 0.5) Color(16711680) \"\"\" return cls . from_rgb ( * [ int ( round ( c * 255 )) for c in colorsys . hls_to_rgb ( h , l , s )]) @classmethod def from_random ( cls ) -> Color : \"\"\" Creates a Color object from a random color. Randomly generates a color in the RGB color space. Returns ------- wyvern.Color A Color object. \"\"\" return cls . from_rgb ( * [ random . randint ( 0 , 255 ) for _ in range ( 3 )]) @classmethod def from_string ( cls , string : str ) -> Color : \"\"\" Creates a Color object from a string. Parameters ---------- string: str The string to use. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_string('rgb(255, 0, 0)') Color(16711680) >>> Color.from_string('hsl(0, 100%, 50%)') Color(-80727249750) >>> Color.from_string('hsv(0, 100%, 100%)') Color(1022371500) >>> Color.from_string('#ff0000') Color(16776960) \"\"\" if string . startswith ( \"#\" ): return cls . from_hex ( string ) elif match := cls . RGB_REGEX . match ( string ): return cls . from_rgb ( * [ int ( c ) for c in match . groups ()]) elif match := cls . HSL_REGEX . match ( string ): return cls . from_hsl ( * [ float ( c ) for c in match . groups ()]) elif match := cls . HSV_REGEX . match ( string ): return cls . from_hsv ( * [ float ( c ) for c in match . groups ()]) raise ValueError ( f \"Invalid color string: { string } \" ) @classmethod def default ( cls ) -> Color : \"\"\" Creates a Color object from the default color. This is `0x000000`. (Black) Examples -------- >>> Color.default() Color(0) \"\"\" return cls ( 0x000000 ) @property def hex ( self ) -> str : \"\"\"The hex value of the color.\"\"\" return f \"# { self . value : 06x } \" @property def rgb ( self ) -> tuple [ int , int , int ]: \"\"\"The RGB values of the color.\"\"\" return ( self . value >> 16 ) & 0xFF , ( self . value >> 8 ) & 0xFF , self . value & 0xFF @property def hsv ( self ) -> tuple [ float , float , float ]: \"\"\"The HSV values of the color.\"\"\" return colorsys . rgb_to_hsv ( * ( c / 255 for c in self . rgb )) @property def hsl ( self ) -> tuple [ float , float , float ]: \"\"\"The HSL values of the color.\"\"\" return colorsys . rgb_to_hls ( * ( c / 255 for c in self . rgb )) @property def r ( self ) -> int : \"\"\"The red value of the color.\"\"\" return self . rgb [ 0 ] @property def g ( self ) -> int : \"\"\"The green value of the color.\"\"\" return self . rgb [ 1 ] @property def b ( self ) -> int : \"\"\"The blue value of the color.\"\"\" return self . rgb [ 2 ] @classmethod def red ( cls ) -> Color : \"\"\"Creates a Color object from the red color. This is `0xff0000`. (Red)\"\"\" return cls ( 0xFF0000 ) @classmethod def green ( cls ) -> Color : \"\"\"Creates a Color object from the green color. This is `0x00ff00`. (Green)\"\"\" return cls ( 0x00FF00 ) @classmethod def blue ( cls ) -> Color : \"\"\"Creates a Color object from the blue color. This is `0x0000ff`. (Blue)\"\"\" return cls ( 0x0000FF ) @classmethod def yellow ( cls ) -> Color : \"\"\"Creates a Color object from the yellow color. This is `0xffff00`. (Yellow)\"\"\" return cls ( 0xFFFF00 ) @classmethod def cyan ( cls ) -> Color : \"\"\"Creates a Color object from the cyan color. This is `0x00ffff`. (Cyan)\"\"\" return cls ( 0x00FFFF ) @classmethod def magenta ( cls ) -> Color : \"\"\"Creates a Color object from the magenta color. This is `0xff00ff`. (Magenta)\"\"\" return cls ( 0xFF00FF ) @classmethod def black ( cls ) -> Color : \"\"\"Creates a Color object from the black color. This is `0x000000`. (Black)\"\"\" return cls ( 0x000000 ) @classmethod def white ( cls ) -> Color : \"\"\"Creates a Color object from the white color. This is `0xffffff`. (White)\"\"\" return cls ( 0xFFFFFF ) @classmethod def gray ( cls ) -> Color : \"\"\"Creates a Color object from the gray color. This is `0x808080`. (Gray)\"\"\" return cls ( 0x808080 ) @classmethod def grey ( cls ) -> Color : \"\"\"Creates a Color object from the grey color. This is `0x808080`. (Grey)\"\"\" return cls ( 0x808080 ) @classmethod def orange ( cls ) -> Color : \"\"\"Creates a Color object from the orange color. This is `0xffa500`. (Orange)\"\"\" return cls ( 0xFFA500 )","title":"Color"},{"location":"api_reference/colors/#wyvern.colors.Color.b","text":"The blue value of the color. Source code in wyvern/colors.py 274 275 276 277 @property def b ( self ) -> int : \"\"\"The blue value of the color.\"\"\" return self . rgb [ 2 ]","title":"b()"},{"location":"api_reference/colors/#wyvern.colors.Color.black","text":"Creates a Color object from the black color. This is 0x000000 . (Black) Source code in wyvern/colors.py 309 310 311 312 @classmethod def black ( cls ) -> Color : \"\"\"Creates a Color object from the black color. This is `0x000000`. (Black)\"\"\" return cls ( 0x000000 )","title":"black()"},{"location":"api_reference/colors/#wyvern.colors.Color.blue","text":"Creates a Color object from the blue color. This is 0x0000ff . (Blue) Source code in wyvern/colors.py 289 290 291 292 @classmethod def blue ( cls ) -> Color : \"\"\"Creates a Color object from the blue color. This is `0x0000ff`. (Blue)\"\"\" return cls ( 0x0000FF )","title":"blue()"},{"location":"api_reference/colors/#wyvern.colors.Color.cyan","text":"Creates a Color object from the cyan color. This is 0x00ffff . (Cyan) Source code in wyvern/colors.py 299 300 301 302 @classmethod def cyan ( cls ) -> Color : \"\"\"Creates a Color object from the cyan color. This is `0x00ffff`. (Cyan)\"\"\" return cls ( 0x00FFFF )","title":"cyan()"},{"location":"api_reference/colors/#wyvern.colors.Color.default","text":"Creates a Color object from the default color. This is 0x000000 . (Black) Examples: >>> Color.default() Color(0) Source code in wyvern/colors.py 230 231 232 233 234 235 236 237 238 239 240 241 242 @classmethod def default ( cls ) -> Color : \"\"\" Creates a Color object from the default color. This is `0x000000`. (Black) Examples -------- >>> Color.default() Color(0) \"\"\" return cls ( 0x000000 )","title":"default()"},{"location":"api_reference/colors/#wyvern.colors.Color.from_hex","text":"Creates a Color object from a hex value. Parameters: Name Type Description Default hex_value str The hex value to use. required Returns: Type Description wyvern . Color A Color object. Examples: >>> Color.from_hex('#ff0000') Color(16776960) >>> Color.from_hex('#00ff00') Color(255) >>> Color.from_hex('#0000ff') Color(0) Source code in wyvern/colors.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 @classmethod def from_hex ( cls , hex_value : str ) -> Color : \"\"\" Creates a Color object from a hex value. Parameters ---------- hex_value: str The hex value to use. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_hex('#ff0000') Color(16776960) >>> Color.from_hex('#00ff00') Color(255) >>> Color.from_hex('#0000ff') Color(0) \"\"\" if match := cls . HEX_REGEX . match ( hex_value ): hex_value = match . group ( 1 ) if len ( hex_value ) == 3 : hex_value = \"\" . join ( c * 2 for c in hex_value ) return cls ( int ( hex_value , 16 )) raise ValueError ( f \"Invalid hex value: { hex_value } \" )","title":"from_hex()"},{"location":"api_reference/colors/#wyvern.colors.Color.from_hsl","text":"Creates a Color object from HSL values. Parameters: Name Type Description Default h float The hue value. required s float The saturation value. required l float The lightness value. required Returns: Type Description wyvern . Color A Color object. Examples: >>> Color.from_hsl(0, 1, 0.5) Color(16711680) >>> Color.from_hsl(120, 1, 0.5) Color(16711680) >>> Color.from_hsl(240, 1, 0.5) Color(16711680) Source code in wyvern/colors.py 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 @classmethod def from_hsl ( cls , h : float , s : float , l : float ) -> Color : \"\"\" Creates a Color object from HSL values. Parameters ---------- h: float The hue value. s: float The saturation value. l: float The lightness value. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_hsl(0, 1, 0.5) Color(16711680) >>> Color.from_hsl(120, 1, 0.5) Color(16711680) >>> Color.from_hsl(240, 1, 0.5) Color(16711680) \"\"\" return cls . from_rgb ( * [ int ( round ( c * 255 )) for c in colorsys . hls_to_rgb ( h , l , s )])","title":"from_hsl()"},{"location":"api_reference/colors/#wyvern.colors.Color.from_hsv","text":"Creates a Color object from HSV values. Parameters: Name Type Description Default h float The hue value. required s float The saturation value. required v float The value in HSV color space. required Returns: Type Description wyvern . Color A Color object. Examples: >>> Color.from_hsv(0, 1, 1) Color(16711680) >>> Color.from_hsv(120, 1, 1) Color(16711680) >>> Color.from_hsv(240, 1, 1) Color(16711680) Source code in wyvern/colors.py 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 @classmethod def from_hsv ( cls , h : float , s : float , v : float ) -> Color : \"\"\" Creates a Color object from HSV values. Parameters ---------- h: float The hue value. s: float The saturation value. v: float The value in HSV color space. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_hsv(0, 1, 1) Color(16711680) >>> Color.from_hsv(120, 1, 1) Color(16711680) >>> Color.from_hsv(240, 1, 1) Color(16711680) \"\"\" return cls . from_rgb ( * [ int ( round ( c * 255 )) for c in colorsys . hsv_to_rgb ( h , s , v )])","title":"from_hsv()"},{"location":"api_reference/colors/#wyvern.colors.Color.from_random","text":"Creates a Color object from a random color. Randomly generates a color in the RGB color space. Returns: Type Description wyvern . Color A Color object. Source code in wyvern/colors.py 177 178 179 180 181 182 183 184 185 186 187 188 @classmethod def from_random ( cls ) -> Color : \"\"\" Creates a Color object from a random color. Randomly generates a color in the RGB color space. Returns ------- wyvern.Color A Color object. \"\"\" return cls . from_rgb ( * [ random . randint ( 0 , 255 ) for _ in range ( 3 )])","title":"from_random()"},{"location":"api_reference/colors/#wyvern.colors.Color.from_rgb","text":"Creates a Color object from RGB values. Parameters: Name Type Description Default r int The red value. required g int The green value. required b int The blue value. required Returns: Type Description wyvern . Color A Color object. Examples: >>> Color.from_rgb(255, 0, 0) Color(16711680) >>> Color.from_rgb(0, 255, 0) Color(65280) >>> Color.from_rgb(0, 0, 255) Color(255) Source code in wyvern/colors.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 @classmethod def from_rgb ( cls , r : int , g : int , b : int ) -> Color : \"\"\" Creates a Color object from RGB values. Parameters ---------- r: int The red value. g: int The green value. b: int The blue value. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_rgb(255, 0, 0) Color(16711680) >>> Color.from_rgb(0, 255, 0) Color(65280) >>> Color.from_rgb(0, 0, 255) Color(255) \"\"\" return cls (( r << 16 ) + ( g << 8 ) + b )","title":"from_rgb()"},{"location":"api_reference/colors/#wyvern.colors.Color.from_string","text":"Creates a Color object from a string. Parameters: Name Type Description Default string str The string to use. required Returns: Type Description wyvern . Color A Color object. Examples: >>> Color.from_string('rgb(255, 0, 0)') Color(16711680) >>> Color.from_string('hsl(0, 100%, 50%)') Color(-80727249750) >>> Color.from_string('hsv(0, 100%, 100%)') Color(1022371500) >>> Color.from_string('#ff0000') Color(16776960) Source code in wyvern/colors.py 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 @classmethod def from_string ( cls , string : str ) -> Color : \"\"\" Creates a Color object from a string. Parameters ---------- string: str The string to use. Returns ------- wyvern.Color A Color object. Examples -------- >>> Color.from_string('rgb(255, 0, 0)') Color(16711680) >>> Color.from_string('hsl(0, 100%, 50%)') Color(-80727249750) >>> Color.from_string('hsv(0, 100%, 100%)') Color(1022371500) >>> Color.from_string('#ff0000') Color(16776960) \"\"\" if string . startswith ( \"#\" ): return cls . from_hex ( string ) elif match := cls . RGB_REGEX . match ( string ): return cls . from_rgb ( * [ int ( c ) for c in match . groups ()]) elif match := cls . HSL_REGEX . match ( string ): return cls . from_hsl ( * [ float ( c ) for c in match . groups ()]) elif match := cls . HSV_REGEX . match ( string ): return cls . from_hsv ( * [ float ( c ) for c in match . groups ()]) raise ValueError ( f \"Invalid color string: { string } \" )","title":"from_string()"},{"location":"api_reference/colors/#wyvern.colors.Color.g","text":"The green value of the color. Source code in wyvern/colors.py 269 270 271 272 @property def g ( self ) -> int : \"\"\"The green value of the color.\"\"\" return self . rgb [ 1 ]","title":"g()"},{"location":"api_reference/colors/#wyvern.colors.Color.gray","text":"Creates a Color object from the gray color. This is 0x808080 . (Gray) Source code in wyvern/colors.py 319 320 321 322 @classmethod def gray ( cls ) -> Color : \"\"\"Creates a Color object from the gray color. This is `0x808080`. (Gray)\"\"\" return cls ( 0x808080 )","title":"gray()"},{"location":"api_reference/colors/#wyvern.colors.Color.green","text":"Creates a Color object from the green color. This is 0x00ff00 . (Green) Source code in wyvern/colors.py 284 285 286 287 @classmethod def green ( cls ) -> Color : \"\"\"Creates a Color object from the green color. This is `0x00ff00`. (Green)\"\"\" return cls ( 0x00FF00 )","title":"green()"},{"location":"api_reference/colors/#wyvern.colors.Color.grey","text":"Creates a Color object from the grey color. This is 0x808080 . (Grey) Source code in wyvern/colors.py 324 325 326 327 @classmethod def grey ( cls ) -> Color : \"\"\"Creates a Color object from the grey color. This is `0x808080`. (Grey)\"\"\" return cls ( 0x808080 )","title":"grey()"},{"location":"api_reference/colors/#wyvern.colors.Color.hex","text":"The hex value of the color. Source code in wyvern/colors.py 244 245 246 247 @property def hex ( self ) -> str : \"\"\"The hex value of the color.\"\"\" return f \"# { self . value : 06x } \"","title":"hex()"},{"location":"api_reference/colors/#wyvern.colors.Color.hsl","text":"The HSL values of the color. Source code in wyvern/colors.py 259 260 261 262 @property def hsl ( self ) -> tuple [ float , float , float ]: \"\"\"The HSL values of the color.\"\"\" return colorsys . rgb_to_hls ( * ( c / 255 for c in self . rgb ))","title":"hsl()"},{"location":"api_reference/colors/#wyvern.colors.Color.hsv","text":"The HSV values of the color. Source code in wyvern/colors.py 254 255 256 257 @property def hsv ( self ) -> tuple [ float , float , float ]: \"\"\"The HSV values of the color.\"\"\" return colorsys . rgb_to_hsv ( * ( c / 255 for c in self . rgb ))","title":"hsv()"},{"location":"api_reference/colors/#wyvern.colors.Color.magenta","text":"Creates a Color object from the magenta color. This is 0xff00ff . (Magenta) Source code in wyvern/colors.py 304 305 306 307 @classmethod def magenta ( cls ) -> Color : \"\"\"Creates a Color object from the magenta color. This is `0xff00ff`. (Magenta)\"\"\" return cls ( 0xFF00FF )","title":"magenta()"},{"location":"api_reference/colors/#wyvern.colors.Color.orange","text":"Creates a Color object from the orange color. This is 0xffa500 . (Orange) Source code in wyvern/colors.py 329 330 331 332 @classmethod def orange ( cls ) -> Color : \"\"\"Creates a Color object from the orange color. This is `0xffa500`. (Orange)\"\"\" return cls ( 0xFFA500 )","title":"orange()"},{"location":"api_reference/colors/#wyvern.colors.Color.r","text":"The red value of the color. Source code in wyvern/colors.py 264 265 266 267 @property def r ( self ) -> int : \"\"\"The red value of the color.\"\"\" return self . rgb [ 0 ]","title":"r()"},{"location":"api_reference/colors/#wyvern.colors.Color.red","text":"Creates a Color object from the red color. This is 0xff0000 . (Red) Source code in wyvern/colors.py 279 280 281 282 @classmethod def red ( cls ) -> Color : \"\"\"Creates a Color object from the red color. This is `0xff0000`. (Red)\"\"\" return cls ( 0xFF0000 )","title":"red()"},{"location":"api_reference/colors/#wyvern.colors.Color.rgb","text":"The RGB values of the color. Source code in wyvern/colors.py 249 250 251 252 @property def rgb ( self ) -> tuple [ int , int , int ]: \"\"\"The RGB values of the color.\"\"\" return ( self . value >> 16 ) & 0xFF , ( self . value >> 8 ) & 0xFF , self . value & 0xFF","title":"rgb()"},{"location":"api_reference/colors/#wyvern.colors.Color.white","text":"Creates a Color object from the white color. This is 0xffffff . (White) Source code in wyvern/colors.py 314 315 316 317 @classmethod def white ( cls ) -> Color : \"\"\"Creates a Color object from the white color. This is `0xffffff`. (White)\"\"\" return cls ( 0xFFFFFF )","title":"white()"},{"location":"api_reference/colors/#wyvern.colors.Color.yellow","text":"Creates a Color object from the yellow color. This is 0xffff00 . (Yellow) Source code in wyvern/colors.py 294 295 296 297 @classmethod def yellow ( cls ) -> Color : \"\"\"Creates a Color object from the yellow color. This is `0xffff00`. (Yellow)\"\"\" return cls ( 0xFFFF00 )","title":"yellow()"},{"location":"api_reference/events/","text":"Events Event Event Enums. Source code in wyvern/events.py 12 13 14 15 class Event : \"\"\"Event Enums.\"\"\" MESSAGE_CREATE = \"MESSAGE_CREATE\" EventHandler Event handler to deal with incoming events from the Gateway. Parameters: Name Type Description Default client wyvern . clients . GatewayClient The client binded with the event handler. required Attributes: Name Type Description listeners dict [ str | [ wyvern . events . Event ], list [ wyvern . events . EventListener ]] A container for event listeners. Source code in wyvern/events.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 class EventHandler : \"\"\" Event handler to deal with incoming events from the Gateway. Parameters ---------- client : wyvern.clients.GatewayClient The client binded with the event handler. Attributes ---------- listeners: dict[str | [wyvern.events.Event], list[wyvern.events.EventListener]] A container for event listeners. \"\"\" listeners : dict [ str | Event , list [ EventListener ]] = {} def __new__ ( cls : type [ \"EventHandler\" ], client : \"GatewayClient\" ) -> \"EventHandler\" : inst = super () . __new__ ( cls ) for _obj in cls . __mro__ : for item in _obj . __dict__ . values (): if isinstance ( item , EventListener ): inst . add_listener ( item ) return inst def __init__ ( self , client : \"GatewayClient\" ) -> None : self . client = client def add_listener ( self , event_listener : EventListener ) -> None : \"\"\" Adds a listener to the handler. Arguments --------- event_listener: wyvern.events.EventListener The listener to be added. \"\"\" self . listeners . setdefault ( event_listener . event_type , []) . append ( event_listener ) def dispatch ( self , event : str | Event , * args : typing . Any ) -> None : \"\"\" Dispatches events from the gateway. This method runs all the listeners registered in the container for the specific event. Parameters ---------- event: str | wyvern.events.Event Name of the event to be dispatched. *args: tuple[typing.Any, ...] Arguments to provide in callbacks. \"\"\" invokes = [ ( lsnr ( self , * args ) if ( len ( str ( lsnr . callback ) . split ( \".\" )) > 1 ) else lsnr ( * args )) for lsnr in self . listeners . get ( event , []) if lsnr . max_trigger > lsnr . trigger_count ] asyncio . gather ( * invokes ) add_listener ( event_listener ) Adds a listener to the handler. Arguments event_listener: wyvern.events.EventListener The listener to be added. Source code in wyvern/events.py 82 83 84 85 86 87 88 89 90 91 92 def add_listener ( self , event_listener : EventListener ) -> None : \"\"\" Adds a listener to the handler. Arguments --------- event_listener: wyvern.events.EventListener The listener to be added. \"\"\" self . listeners . setdefault ( event_listener . event_type , []) . append ( event_listener ) dispatch ( event , * args ) Dispatches events from the gateway. This method runs all the listeners registered in the container for the specific event. Parameters: Name Type Description Default event str | Event Name of the event to be dispatched. required *args typing . Any Arguments to provide in callbacks. () Source code in wyvern/events.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def dispatch ( self , event : str | Event , * args : typing . Any ) -> None : \"\"\" Dispatches events from the gateway. This method runs all the listeners registered in the container for the specific event. Parameters ---------- event: str | wyvern.events.Event Name of the event to be dispatched. *args: tuple[typing.Any, ...] Arguments to provide in callbacks. \"\"\" invokes = [ ( lsnr ( self , * args ) if ( len ( str ( lsnr . callback ) . split ( \".\" )) > 1 ) else lsnr ( * args )) for lsnr in self . listeners . get ( event , []) if lsnr . max_trigger > lsnr . trigger_count ] asyncio . gather ( * invokes ) EventListener Class representating a callable to be called when a specific event type is dispatched. Parameters: Name Type Description Default event_type str | wyvern . events . Event The type of event this listener belongs to. required callback typing . Callable [..., typing . Awaitable [ typing . Any ]] The coroutine to run when event is dispatched required max_trigger int | float Max amount of time this listener will be triggered. required Attributes: Name Type Description trigger_count int Number of times this listener has been triggered Source code in wyvern/events.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 @attrs . define class EventListener : \"\"\" Class representating a callable to be called when a specific event type is dispatched. Parameters ---------- event_type : str | wyvern.events.Event The type of event this listener belongs to. callback : typing.Callable[..., typing.Awaitable[typing.Any]] The coroutine to run when event is dispatched max_trigger : int | float Max amount of time this listener will be triggered. Attributes ---------- trigger_count: int Number of times this listener has been triggered \"\"\" event_type : str | Event callback : typing . Callable [ ... , typing . Awaitable [ typing . Any ]] max_trigger : int | float trigger_count : int = 0 def __call__ ( self , * args : typing . Any ) -> typing . Awaitable [ typing . Any ]: self . trigger_count += 1 return self . callback ( * args ) listener ( event , * , max_trigger = float ( 'inf' )) Creates a wyvern.events.EventListener object. Parameters: Name Type Description Default event str | Event The event to listen. required max_trigger int | float Maximum number of times this listener has to be triggered. float('inf') Returns: Type Description wyvern . events . EventListener A EventListener object. Source code in wyvern/events.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def listener ( event : str | Event , * , max_trigger : int | float = float ( \"inf\" ) ) -> typing . Callable [[ typing . Callable [ ... , typing . Awaitable [ typing . Any ]]], EventListener ]: \"\"\"Creates a [wyvern.events.EventListener][] object. Parameters ---------- event: str | wyvern.events.Event The event to listen. max_trigger: int | float Maximum number of times this listener has to be triggered. Returns ------- wyvern.events.EventListener A EventListener object. \"\"\" def inner ( callback : typing . Callable [ ... , typing . Awaitable [ typing . Any ]]) -> EventListener : nonlocal event , max_trigger return EventListener ( event , callback , max_trigger , 0 ) return inner","title":"events"},{"location":"api_reference/events/#events","text":"","title":"Events"},{"location":"api_reference/events/#wyvern.events.Event","text":"Event Enums. Source code in wyvern/events.py 12 13 14 15 class Event : \"\"\"Event Enums.\"\"\" MESSAGE_CREATE = \"MESSAGE_CREATE\"","title":"Event"},{"location":"api_reference/events/#wyvern.events.EventHandler","text":"Event handler to deal with incoming events from the Gateway. Parameters: Name Type Description Default client wyvern . clients . GatewayClient The client binded with the event handler. required Attributes: Name Type Description listeners dict [ str | [ wyvern . events . Event ], list [ wyvern . events . EventListener ]] A container for event listeners. Source code in wyvern/events.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 class EventHandler : \"\"\" Event handler to deal with incoming events from the Gateway. Parameters ---------- client : wyvern.clients.GatewayClient The client binded with the event handler. Attributes ---------- listeners: dict[str | [wyvern.events.Event], list[wyvern.events.EventListener]] A container for event listeners. \"\"\" listeners : dict [ str | Event , list [ EventListener ]] = {} def __new__ ( cls : type [ \"EventHandler\" ], client : \"GatewayClient\" ) -> \"EventHandler\" : inst = super () . __new__ ( cls ) for _obj in cls . __mro__ : for item in _obj . __dict__ . values (): if isinstance ( item , EventListener ): inst . add_listener ( item ) return inst def __init__ ( self , client : \"GatewayClient\" ) -> None : self . client = client def add_listener ( self , event_listener : EventListener ) -> None : \"\"\" Adds a listener to the handler. Arguments --------- event_listener: wyvern.events.EventListener The listener to be added. \"\"\" self . listeners . setdefault ( event_listener . event_type , []) . append ( event_listener ) def dispatch ( self , event : str | Event , * args : typing . Any ) -> None : \"\"\" Dispatches events from the gateway. This method runs all the listeners registered in the container for the specific event. Parameters ---------- event: str | wyvern.events.Event Name of the event to be dispatched. *args: tuple[typing.Any, ...] Arguments to provide in callbacks. \"\"\" invokes = [ ( lsnr ( self , * args ) if ( len ( str ( lsnr . callback ) . split ( \".\" )) > 1 ) else lsnr ( * args )) for lsnr in self . listeners . get ( event , []) if lsnr . max_trigger > lsnr . trigger_count ] asyncio . gather ( * invokes )","title":"EventHandler"},{"location":"api_reference/events/#wyvern.events.EventHandler.add_listener","text":"Adds a listener to the handler.","title":"add_listener()"},{"location":"api_reference/events/#wyvern.events.EventHandler.add_listener--arguments","text":"event_listener: wyvern.events.EventListener The listener to be added. Source code in wyvern/events.py 82 83 84 85 86 87 88 89 90 91 92 def add_listener ( self , event_listener : EventListener ) -> None : \"\"\" Adds a listener to the handler. Arguments --------- event_listener: wyvern.events.EventListener The listener to be added. \"\"\" self . listeners . setdefault ( event_listener . event_type , []) . append ( event_listener )","title":"Arguments"},{"location":"api_reference/events/#wyvern.events.EventHandler.dispatch","text":"Dispatches events from the gateway. This method runs all the listeners registered in the container for the specific event. Parameters: Name Type Description Default event str | Event Name of the event to be dispatched. required *args typing . Any Arguments to provide in callbacks. () Source code in wyvern/events.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def dispatch ( self , event : str | Event , * args : typing . Any ) -> None : \"\"\" Dispatches events from the gateway. This method runs all the listeners registered in the container for the specific event. Parameters ---------- event: str | wyvern.events.Event Name of the event to be dispatched. *args: tuple[typing.Any, ...] Arguments to provide in callbacks. \"\"\" invokes = [ ( lsnr ( self , * args ) if ( len ( str ( lsnr . callback ) . split ( \".\" )) > 1 ) else lsnr ( * args )) for lsnr in self . listeners . get ( event , []) if lsnr . max_trigger > lsnr . trigger_count ] asyncio . gather ( * invokes )","title":"dispatch()"},{"location":"api_reference/events/#wyvern.events.EventListener","text":"Class representating a callable to be called when a specific event type is dispatched. Parameters: Name Type Description Default event_type str | wyvern . events . Event The type of event this listener belongs to. required callback typing . Callable [..., typing . Awaitable [ typing . Any ]] The coroutine to run when event is dispatched required max_trigger int | float Max amount of time this listener will be triggered. required Attributes: Name Type Description trigger_count int Number of times this listener has been triggered Source code in wyvern/events.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 @attrs . define class EventListener : \"\"\" Class representating a callable to be called when a specific event type is dispatched. Parameters ---------- event_type : str | wyvern.events.Event The type of event this listener belongs to. callback : typing.Callable[..., typing.Awaitable[typing.Any]] The coroutine to run when event is dispatched max_trigger : int | float Max amount of time this listener will be triggered. Attributes ---------- trigger_count: int Number of times this listener has been triggered \"\"\" event_type : str | Event callback : typing . Callable [ ... , typing . Awaitable [ typing . Any ]] max_trigger : int | float trigger_count : int = 0 def __call__ ( self , * args : typing . Any ) -> typing . Awaitable [ typing . Any ]: self . trigger_count += 1 return self . callback ( * args )","title":"EventListener"},{"location":"api_reference/events/#wyvern.events.listener","text":"Creates a wyvern.events.EventListener object. Parameters: Name Type Description Default event str | Event The event to listen. required max_trigger int | float Maximum number of times this listener has to be triggered. float('inf') Returns: Type Description wyvern . events . EventListener A EventListener object. Source code in wyvern/events.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def listener ( event : str | Event , * , max_trigger : int | float = float ( \"inf\" ) ) -> typing . Callable [[ typing . Callable [ ... , typing . Awaitable [ typing . Any ]]], EventListener ]: \"\"\"Creates a [wyvern.events.EventListener][] object. Parameters ---------- event: str | wyvern.events.Event The event to listen. max_trigger: int | float Maximum number of times this listener has to be triggered. Returns ------- wyvern.events.EventListener A EventListener object. \"\"\" def inner ( callback : typing . Callable [ ... , typing . Awaitable [ typing . Any ]]) -> EventListener : nonlocal event , max_trigger return EventListener ( event , callback , max_trigger , 0 ) return inner","title":"listener()"},{"location":"api_reference/intents/","text":"Intents Intents constructor to provide to the gateway. Attributes: Name Type Description value int The final value of intents generated by the constructor. Source code in wyvern/intents.pytyping . final class Intents : \"\"\" Intents constructor to provide to the gateway. Attributes ---------- value: int The final value of intents generated by the constructor. \"\"\" value : int NONE = 0 \"\"\" No intents. \"\"\" GUILDS = 1 << 0 \"\"\"Required for these gateway events: * `GUILD_CREATE` * `GUILD_UPDATE` * `GUILD_DELETE` * `GUILD_ROLE_CREATE` * `GUILD_ROLE_UPDATE` * `GUILD_ROLE_DELETE` * `CHANNEL_CREATE` * `CHANNEL_UPDATE` * `CHANNEL_DELETE` * `CHANNEL_PINS_UPDATE` * `THREAD_CREATE` * `THREAD_UPDATE` * `THREAD_DELETE` * `THREAD_LIST_SYNC` * `THREAD_MEMBER_UPDATE` * `THREAD_MEMBERS_UPDATE` * `STAGE_INSTANCE_CREATE` * `STAGE_INSTANCE_UPDATE` * `STAGE_INSTANCE_DELETE` \"\"\" GUILD_MEMBERS = 1 << 1 \"\"\"Required for these gateway events: * `GUILD_MEMBER_ADD` * `GUILD_MEMBER_UPDATE` * `GUILD_MEMBER_REMOVE` * `THREAD_MEMBERS_UPDATE` !!! note This is a privileged intent. \"\"\" GUILD_BANS = 1 << 2 \"\"\"Required for these gateway events: * `GUILD_BAN_ADD` * `GUILD_BAN_REMOVE` \"\"\" GUILD_EMOJIS = 1 << 3 \"\"\"Required for these gateway events: * `GUILD_EMOJIS_UPDATE` * `GUILD_STICKERS_UPDATE` \"\"\" GUILD_INTEGRATIONS = 1 << 4 \"\"\"Required for these gateway events: * `GUILD_INTEGRATIONS_UPDATE` * `INTEGRATION_CREATE` * `INTEGRATION_UPDATE` * `INTEGRATION_DELETE` \"\"\" GUILD_WEBHOOKS = 1 << 5 \"\"\"Required for these gateway events: * `WEBHOOKS_UPDATE` \"\"\" GUILD_INVITES = 1 << 6 \"\"\"Required for these gateway events: * `INVITE_CREATE` * `INVITE_DELETE` \"\"\" GUILD_VOICE_STATES = 1 << 7 \"\"\"Required for these gateway events: * `VOICE_STATE_UPDATE` \"\"\" GUILD_PRESENCES = 1 << 8 \"\"\"Required for these gateway events: * `PRESENCE_UPDATE` !!! note This is a privileged intent. \"\"\" GUILD_MESSAGES = 1 << 9 \"\"\"Required for these gateway events: * `MESSAGE_CREATE` * `MESSAGE_UPDATE` * `MESSAGE_DELETE` * `MESSAGE_DELETE_BULK` \"\"\" GUILD_MESSAGE_REACTIONS = 1 << 10 \"\"\"Required for these gateway events: * `MESSAGE_REACTION_ADD` * `MESSAGE_REACTION_REMOVE` * `MESSAGE_REACTION_REMOVE_ALL` * `MESSAGE_REACTION_REMOVE_EMOJI` \"\"\" GUILD_MESSAGE_TYPING = 1 << 11 \"\"\"Required for these gateway events: * `TYPING_START` \"\"\" DIRECT_MESSAGES = 1 << 12 \"\"\"Required for these gateway events: * `MESSAGE_CREATE` * `MESSAGE_UPDATE` * `MESSAGE_DELETE` * `CHANNEL_PINS_UPDATE` \"\"\" DIRECT_MESSAGE_REACTIONS = 1 << 13 \"\"\"Required for these gateway events: * `MESSAGE_REACTION_ADD` * `MESSAGE_REACTION_REMOVE` * `MESSAGE_REACTION_REMOVE_ALL` * `MESSAGE_REACTION_REMOVE_EMOJI` \"\"\" DIRECT_MESSAGE_TYPING = 1 << 14 \"\"\"Required for these gateway events: * `TYPING_START` \"\"\" MESSAGE_CONTENT = 1 << 15 \"\"\"Required for guild message's content. !!! note This is a privileged intent. \"\"\" GUILD_SCHEDULED_EVENTS = 1 << 16 \"\"\"Required for these gateway events: * `GUILD_SCHEDULED_EVENT_CREATE` * `GUILD_SCHEDULED_EVENT_UPDATE` * `GUILD_SCHEDULED_EVENT_DELETE` * `GUILD_SCHEDULED_EVENT_USER_ADD` * `GUILD_SCHEDULED_EVENT_USER_REMOVE` \"\"\" AUTO_MODERATION_CONFIGURATION = 1 << 20 \"\"\"Required for these gateway events: * `AUTO_MODERATION_RULE_CREATE` * `AUTO_MODERATION_RULE_UPDATE` * `AUTO_MODERATION_RULE_DELETE` \"\"\" AUTO_MODERATION_EXECUTION = 1 << 21 \"\"\"Required for these gateway events: * `AUTO_MODERATION_ACTION_EXECUTION` \"\"\" UNPRIVILEGED = ( GUILDS | GUILD_EMOJIS | GUILD_INTEGRATIONS | GUILD_WEBHOOKS | GUILD_INVITES | GUILD_VOICE_STATES | GUILD_MESSAGE_REACTIONS | GUILD_MESSAGE_TYPING | GUILD_MESSAGES | DIRECT_MESSAGES | DIRECT_MESSAGE_TYPING | DIRECT_MESSAGE_REACTIONS | AUTO_MODERATION_CONFIGURATION | AUTO_MODERATION_EXECUTION ) \"\"\"All unprivileged intents.\"\"\" PRIVILEGED = MESSAGE_CONTENT | GUILD_MEMBERS | GUILD_PRESENCES \"\"\"All privileged intents.\"\"\" def __init__ ( self , value : int = NONE ) -> None : self . value = value def __int__ ( self ) -> int : return self . value AUTO_MODERATION_CONFIGURATION = 1 << 20 class-attribute Required for these gateway events: AUTO_MODERATION_RULE_CREATE AUTO_MODERATION_RULE_UPDATE AUTO_MODERATION_RULE_DELETE AUTO_MODERATION_EXECUTION = 1 << 21 class-attribute Required for these gateway events: AUTO_MODERATION_ACTION_EXECUTION DIRECT_MESSAGES = 1 << 12 class-attribute Required for these gateway events: MESSAGE_CREATE MESSAGE_UPDATE MESSAGE_DELETE CHANNEL_PINS_UPDATE DIRECT_MESSAGE_REACTIONS = 1 << 13 class-attribute Required for these gateway events: MESSAGE_REACTION_ADD MESSAGE_REACTION_REMOVE MESSAGE_REACTION_REMOVE_ALL MESSAGE_REACTION_REMOVE_EMOJI DIRECT_MESSAGE_TYPING = 1 << 14 class-attribute Required for these gateway events: TYPING_START GUILDS = 1 << 0 class-attribute Required for these gateway events: GUILD_CREATE GUILD_UPDATE GUILD_DELETE GUILD_ROLE_CREATE GUILD_ROLE_UPDATE GUILD_ROLE_DELETE CHANNEL_CREATE CHANNEL_UPDATE CHANNEL_DELETE CHANNEL_PINS_UPDATE THREAD_CREATE THREAD_UPDATE THREAD_DELETE THREAD_LIST_SYNC THREAD_MEMBER_UPDATE THREAD_MEMBERS_UPDATE STAGE_INSTANCE_CREATE STAGE_INSTANCE_UPDATE STAGE_INSTANCE_DELETE GUILD_BANS = 1 << 2 class-attribute Required for these gateway events: GUILD_BAN_ADD GUILD_BAN_REMOVE GUILD_EMOJIS = 1 << 3 class-attribute Required for these gateway events: GUILD_EMOJIS_UPDATE GUILD_STICKERS_UPDATE GUILD_INTEGRATIONS = 1 << 4 class-attribute Required for these gateway events: GUILD_INTEGRATIONS_UPDATE INTEGRATION_CREATE INTEGRATION_UPDATE INTEGRATION_DELETE GUILD_INVITES = 1 << 6 class-attribute Required for these gateway events: INVITE_CREATE INVITE_DELETE GUILD_MEMBERS = 1 << 1 class-attribute Required for these gateway events: GUILD_MEMBER_ADD GUILD_MEMBER_UPDATE GUILD_MEMBER_REMOVE THREAD_MEMBERS_UPDATE !!! note This is a privileged intent. GUILD_MESSAGES = 1 << 9 class-attribute Required for these gateway events: MESSAGE_CREATE MESSAGE_UPDATE MESSAGE_DELETE MESSAGE_DELETE_BULK GUILD_MESSAGE_REACTIONS = 1 << 10 class-attribute Required for these gateway events: MESSAGE_REACTION_ADD MESSAGE_REACTION_REMOVE MESSAGE_REACTION_REMOVE_ALL MESSAGE_REACTION_REMOVE_EMOJI GUILD_MESSAGE_TYPING = 1 << 11 class-attribute Required for these gateway events: TYPING_START GUILD_PRESENCES = 1 << 8 class-attribute Required for these gateway events: PRESENCE_UPDATE !!! note This is a privileged intent. GUILD_SCHEDULED_EVENTS = 1 << 16 class-attribute Required for these gateway events: GUILD_SCHEDULED_EVENT_CREATE GUILD_SCHEDULED_EVENT_UPDATE GUILD_SCHEDULED_EVENT_DELETE GUILD_SCHEDULED_EVENT_USER_ADD GUILD_SCHEDULED_EVENT_USER_REMOVE GUILD_VOICE_STATES = 1 << 7 class-attribute Required for these gateway events: VOICE_STATE_UPDATE GUILD_WEBHOOKS = 1 << 5 class-attribute Required for these gateway events: WEBHOOKS_UPDATE MESSAGE_CONTENT = 1 << 15 class-attribute Required for guild message's content. !!! note This is a privileged intent. NONE = 0 class-attribute No intents. PRIVILEGED = MESSAGE_CONTENT | GUILD_MEMBERS | GUILD_PRESENCES class-attribute All privileged intents. UNPRIVILEGED = GUILDS | GUILD_EMOJIS | GUILD_INTEGRATIONS | GUILD_WEBHOOKS | GUILD_INVITES | GUILD_VOICE_STATES | GUILD_MESSAGE_REACTIONS | GUILD_MESSAGE_TYPING | GUILD_MESSAGES | DIRECT_MESSAGES | DIRECT_MESSAGE_TYPING | DIRECT_MESSAGE_REACTIONS | AUTO_MODERATION_CONFIGURATION | AUTO_MODERATION_EXECUTION class-attribute All unprivileged intents.","title":"intents"},{"location":"api_reference/intents/#wyvern.intents.Intents","text":"Intents constructor to provide to the gateway. Attributes: Name Type Description value int The final value of intents generated by the constructor. Source code in wyvern/intents.pytyping . final class Intents : \"\"\" Intents constructor to provide to the gateway. Attributes ---------- value: int The final value of intents generated by the constructor. \"\"\" value : int NONE = 0 \"\"\" No intents. \"\"\" GUILDS = 1 << 0 \"\"\"Required for these gateway events: * `GUILD_CREATE` * `GUILD_UPDATE` * `GUILD_DELETE` * `GUILD_ROLE_CREATE` * `GUILD_ROLE_UPDATE` * `GUILD_ROLE_DELETE` * `CHANNEL_CREATE` * `CHANNEL_UPDATE` * `CHANNEL_DELETE` * `CHANNEL_PINS_UPDATE` * `THREAD_CREATE` * `THREAD_UPDATE` * `THREAD_DELETE` * `THREAD_LIST_SYNC` * `THREAD_MEMBER_UPDATE` * `THREAD_MEMBERS_UPDATE` * `STAGE_INSTANCE_CREATE` * `STAGE_INSTANCE_UPDATE` * `STAGE_INSTANCE_DELETE` \"\"\" GUILD_MEMBERS = 1 << 1 \"\"\"Required for these gateway events: * `GUILD_MEMBER_ADD` * `GUILD_MEMBER_UPDATE` * `GUILD_MEMBER_REMOVE` * `THREAD_MEMBERS_UPDATE` !!! note This is a privileged intent. \"\"\" GUILD_BANS = 1 << 2 \"\"\"Required for these gateway events: * `GUILD_BAN_ADD` * `GUILD_BAN_REMOVE` \"\"\" GUILD_EMOJIS = 1 << 3 \"\"\"Required for these gateway events: * `GUILD_EMOJIS_UPDATE` * `GUILD_STICKERS_UPDATE` \"\"\" GUILD_INTEGRATIONS = 1 << 4 \"\"\"Required for these gateway events: * `GUILD_INTEGRATIONS_UPDATE` * `INTEGRATION_CREATE` * `INTEGRATION_UPDATE` * `INTEGRATION_DELETE` \"\"\" GUILD_WEBHOOKS = 1 << 5 \"\"\"Required for these gateway events: * `WEBHOOKS_UPDATE` \"\"\" GUILD_INVITES = 1 << 6 \"\"\"Required for these gateway events: * `INVITE_CREATE` * `INVITE_DELETE` \"\"\" GUILD_VOICE_STATES = 1 << 7 \"\"\"Required for these gateway events: * `VOICE_STATE_UPDATE` \"\"\" GUILD_PRESENCES = 1 << 8 \"\"\"Required for these gateway events: * `PRESENCE_UPDATE` !!! note This is a privileged intent. \"\"\" GUILD_MESSAGES = 1 << 9 \"\"\"Required for these gateway events: * `MESSAGE_CREATE` * `MESSAGE_UPDATE` * `MESSAGE_DELETE` * `MESSAGE_DELETE_BULK` \"\"\" GUILD_MESSAGE_REACTIONS = 1 << 10 \"\"\"Required for these gateway events: * `MESSAGE_REACTION_ADD` * `MESSAGE_REACTION_REMOVE` * `MESSAGE_REACTION_REMOVE_ALL` * `MESSAGE_REACTION_REMOVE_EMOJI` \"\"\" GUILD_MESSAGE_TYPING = 1 << 11 \"\"\"Required for these gateway events: * `TYPING_START` \"\"\" DIRECT_MESSAGES = 1 << 12 \"\"\"Required for these gateway events: * `MESSAGE_CREATE` * `MESSAGE_UPDATE` * `MESSAGE_DELETE` * `CHANNEL_PINS_UPDATE` \"\"\" DIRECT_MESSAGE_REACTIONS = 1 << 13 \"\"\"Required for these gateway events: * `MESSAGE_REACTION_ADD` * `MESSAGE_REACTION_REMOVE` * `MESSAGE_REACTION_REMOVE_ALL` * `MESSAGE_REACTION_REMOVE_EMOJI` \"\"\" DIRECT_MESSAGE_TYPING = 1 << 14 \"\"\"Required for these gateway events: * `TYPING_START` \"\"\" MESSAGE_CONTENT = 1 << 15 \"\"\"Required for guild message's content. !!! note This is a privileged intent. \"\"\" GUILD_SCHEDULED_EVENTS = 1 << 16 \"\"\"Required for these gateway events: * `GUILD_SCHEDULED_EVENT_CREATE` * `GUILD_SCHEDULED_EVENT_UPDATE` * `GUILD_SCHEDULED_EVENT_DELETE` * `GUILD_SCHEDULED_EVENT_USER_ADD` * `GUILD_SCHEDULED_EVENT_USER_REMOVE` \"\"\" AUTO_MODERATION_CONFIGURATION = 1 << 20 \"\"\"Required for these gateway events: * `AUTO_MODERATION_RULE_CREATE` * `AUTO_MODERATION_RULE_UPDATE` * `AUTO_MODERATION_RULE_DELETE` \"\"\" AUTO_MODERATION_EXECUTION = 1 << 21 \"\"\"Required for these gateway events: * `AUTO_MODERATION_ACTION_EXECUTION` \"\"\" UNPRIVILEGED = ( GUILDS | GUILD_EMOJIS | GUILD_INTEGRATIONS | GUILD_WEBHOOKS | GUILD_INVITES | GUILD_VOICE_STATES | GUILD_MESSAGE_REACTIONS | GUILD_MESSAGE_TYPING | GUILD_MESSAGES | DIRECT_MESSAGES | DIRECT_MESSAGE_TYPING | DIRECT_MESSAGE_REACTIONS | AUTO_MODERATION_CONFIGURATION | AUTO_MODERATION_EXECUTION ) \"\"\"All unprivileged intents.\"\"\" PRIVILEGED = MESSAGE_CONTENT | GUILD_MEMBERS | GUILD_PRESENCES \"\"\"All privileged intents.\"\"\" def __init__ ( self , value : int = NONE ) -> None : self . value = value def __int__ ( self ) -> int : return self . value","title":"Intents"},{"location":"api_reference/intents/#wyvern.intents.Intents.AUTO_MODERATION_CONFIGURATION","text":"Required for these gateway events: AUTO_MODERATION_RULE_CREATE AUTO_MODERATION_RULE_UPDATE AUTO_MODERATION_RULE_DELETE","title":"AUTO_MODERATION_CONFIGURATION"},{"location":"api_reference/intents/#wyvern.intents.Intents.AUTO_MODERATION_EXECUTION","text":"Required for these gateway events: AUTO_MODERATION_ACTION_EXECUTION","title":"AUTO_MODERATION_EXECUTION"},{"location":"api_reference/intents/#wyvern.intents.Intents.DIRECT_MESSAGES","text":"Required for these gateway events: MESSAGE_CREATE MESSAGE_UPDATE MESSAGE_DELETE CHANNEL_PINS_UPDATE","title":"DIRECT_MESSAGES"},{"location":"api_reference/intents/#wyvern.intents.Intents.DIRECT_MESSAGE_REACTIONS","text":"Required for these gateway events: MESSAGE_REACTION_ADD MESSAGE_REACTION_REMOVE MESSAGE_REACTION_REMOVE_ALL MESSAGE_REACTION_REMOVE_EMOJI","title":"DIRECT_MESSAGE_REACTIONS"},{"location":"api_reference/intents/#wyvern.intents.Intents.DIRECT_MESSAGE_TYPING","text":"Required for these gateway events: TYPING_START","title":"DIRECT_MESSAGE_TYPING"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILDS","text":"Required for these gateway events: GUILD_CREATE GUILD_UPDATE GUILD_DELETE GUILD_ROLE_CREATE GUILD_ROLE_UPDATE GUILD_ROLE_DELETE CHANNEL_CREATE CHANNEL_UPDATE CHANNEL_DELETE CHANNEL_PINS_UPDATE THREAD_CREATE THREAD_UPDATE THREAD_DELETE THREAD_LIST_SYNC THREAD_MEMBER_UPDATE THREAD_MEMBERS_UPDATE STAGE_INSTANCE_CREATE STAGE_INSTANCE_UPDATE STAGE_INSTANCE_DELETE","title":"GUILDS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_BANS","text":"Required for these gateway events: GUILD_BAN_ADD GUILD_BAN_REMOVE","title":"GUILD_BANS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_EMOJIS","text":"Required for these gateway events: GUILD_EMOJIS_UPDATE GUILD_STICKERS_UPDATE","title":"GUILD_EMOJIS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_INTEGRATIONS","text":"Required for these gateway events: GUILD_INTEGRATIONS_UPDATE INTEGRATION_CREATE INTEGRATION_UPDATE INTEGRATION_DELETE","title":"GUILD_INTEGRATIONS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_INVITES","text":"Required for these gateway events: INVITE_CREATE INVITE_DELETE","title":"GUILD_INVITES"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_MEMBERS","text":"Required for these gateway events: GUILD_MEMBER_ADD GUILD_MEMBER_UPDATE GUILD_MEMBER_REMOVE THREAD_MEMBERS_UPDATE !!! note This is a privileged intent.","title":"GUILD_MEMBERS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_MESSAGES","text":"Required for these gateway events: MESSAGE_CREATE MESSAGE_UPDATE MESSAGE_DELETE MESSAGE_DELETE_BULK","title":"GUILD_MESSAGES"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_MESSAGE_REACTIONS","text":"Required for these gateway events: MESSAGE_REACTION_ADD MESSAGE_REACTION_REMOVE MESSAGE_REACTION_REMOVE_ALL MESSAGE_REACTION_REMOVE_EMOJI","title":"GUILD_MESSAGE_REACTIONS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_MESSAGE_TYPING","text":"Required for these gateway events: TYPING_START","title":"GUILD_MESSAGE_TYPING"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_PRESENCES","text":"Required for these gateway events: PRESENCE_UPDATE !!! note This is a privileged intent.","title":"GUILD_PRESENCES"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_SCHEDULED_EVENTS","text":"Required for these gateway events: GUILD_SCHEDULED_EVENT_CREATE GUILD_SCHEDULED_EVENT_UPDATE GUILD_SCHEDULED_EVENT_DELETE GUILD_SCHEDULED_EVENT_USER_ADD GUILD_SCHEDULED_EVENT_USER_REMOVE","title":"GUILD_SCHEDULED_EVENTS"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_VOICE_STATES","text":"Required for these gateway events: VOICE_STATE_UPDATE","title":"GUILD_VOICE_STATES"},{"location":"api_reference/intents/#wyvern.intents.Intents.GUILD_WEBHOOKS","text":"Required for these gateway events: WEBHOOKS_UPDATE","title":"GUILD_WEBHOOKS"},{"location":"api_reference/intents/#wyvern.intents.Intents.MESSAGE_CONTENT","text":"Required for guild message's content. !!! note This is a privileged intent.","title":"MESSAGE_CONTENT"},{"location":"api_reference/intents/#wyvern.intents.Intents.NONE","text":"No intents.","title":"NONE"},{"location":"api_reference/intents/#wyvern.intents.Intents.PRIVILEGED","text":"All privileged intents.","title":"PRIVILEGED"},{"location":"api_reference/intents/#wyvern.intents.Intents.UNPRIVILEGED","text":"All unprivileged intents.","title":"UNPRIVILEGED"},{"location":"api_reference/rest/","text":"RESTClient RESTClient Source code in wyvern/rest/__init__.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 class RESTClient : def __init__ ( self , * , client : \"GatewayClient\" , token : str , api_version : int = 10 , client_session : aiohttp . ClientSession | None = None , ) -> None : self . _client = client self . _session : aiohttp . ClientSession self . _token = token self . _api_version = api_version self . _headers : typing . Dict [ str , multidict . istr ] = { \"Authorization\" : multidict . istr ( f \"Bot { token } \" )} if client_session is not None : self . _session = client_session async def _create_websocket ( self ) -> aiohttp . ClientWebSocketResponse : if getattr ( self , \"_session\" , None ) is None : self . _session = aiohttp . ClientSession ( headers = self . _headers ) return await self . _session . ws_connect ( f \"wss://gateway.discord.gg/?v= { self . _api_version } &encoding=json\" ) async def request ( self , route : RequestRoute ) -> typing . Any : headers = self . _headers . copy () headers [ \"Content-Type\" ] = multidict . istr ( \"application/json\" ) res = await self . _session . request ( route . type , route . url , headers = headers , json = route . json ) if res . status in ( 200 , 201 ): return await res . json () if res . status in ( 204 , 304 ): return else : raise HTTPException . with_code ( res . status , await res . text ()) async def fetch_client_user ( self ) -> \"models.BotUser\" : \"\"\" Fetch's the bot's user object. Returns: BotUser object representating the bot's user. \"\"\" try : res = await self . request ( RequestRoute ( Endpoints . fetch_client_user ())) return models . converters . payload_to_botuser ( self . _client , res ) except HTTPException as e : if e . code == 401 : raise Unauthorized ( \"Improper token passed.\" ) raise e async def edit_client_user ( self , username : str | None = None , avatar : bytes | None = None ) -> \"models.BotUser\" : payload : dict [ str , bytes | str ] = {} if username is not None : payload [ \"username\" ] = username if avatar is not None : payload [ \"avatar\" ] = avatar res : dict [ str , int | str | bool ] = await self . request ( RequestRoute ( Endpoints . fetch_client_user (), type = \"PATCH\" , json = payload ) ) return models . converters . payload_to_botuser ( self . _client , res ) async def create_message ( self , channel_id : int , content : str | None = None , * , embeds : typing . Sequence [ \"EmbedConstructor\" ] = (), components : typing . Sequence [ ActionRowContainer ] = (), reference : int | models . MessageReference | None = None , ) -> \"models.messages.Message\" : payload : dict [ str , typing . Any ] = { \"content\" : content , \"embeds\" : [ embed . _payload for embed in embeds ], \"components\" : [ comp . to_payload () for comp in components ], } if reference is not None : if isinstance ( reference , models . MessageReference ): payload [ \"message_reference\" ] = reference . to_payload () else : payload [ \"message_reference\" ] = models . MessageReference ( message_id = reference ) . to_payload () res : dict [ str , typing . Any ] = await self . request ( RequestRoute ( Endpoints . create_message ( channel_id ), type = \"POST\" , json = payload ), ) return models . converters . payload_to_message ( self . _client , res ) fetch_client_user () async Fetch's the bot's user object. Returns: BotUser object representating the bot's user. Source code in wyvern/rest/__init__.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 async def fetch_client_user ( self ) -> \"models.BotUser\" : \"\"\" Fetch's the bot's user object. Returns: BotUser object representating the bot's user. \"\"\" try : res = await self . request ( RequestRoute ( Endpoints . fetch_client_user ())) return models . converters . payload_to_botuser ( self . _client , res ) except HTTPException as e : if e . code == 401 : raise Unauthorized ( \"Improper token passed.\" ) raise e","title":"rest"},{"location":"api_reference/rest/#restclient","text":"","title":"RESTClient"},{"location":"api_reference/rest/#wyvern.rest.RESTClient","text":"Source code in wyvern/rest/__init__.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 class RESTClient : def __init__ ( self , * , client : \"GatewayClient\" , token : str , api_version : int = 10 , client_session : aiohttp . ClientSession | None = None , ) -> None : self . _client = client self . _session : aiohttp . ClientSession self . _token = token self . _api_version = api_version self . _headers : typing . Dict [ str , multidict . istr ] = { \"Authorization\" : multidict . istr ( f \"Bot { token } \" )} if client_session is not None : self . _session = client_session async def _create_websocket ( self ) -> aiohttp . ClientWebSocketResponse : if getattr ( self , \"_session\" , None ) is None : self . _session = aiohttp . ClientSession ( headers = self . _headers ) return await self . _session . ws_connect ( f \"wss://gateway.discord.gg/?v= { self . _api_version } &encoding=json\" ) async def request ( self , route : RequestRoute ) -> typing . Any : headers = self . _headers . copy () headers [ \"Content-Type\" ] = multidict . istr ( \"application/json\" ) res = await self . _session . request ( route . type , route . url , headers = headers , json = route . json ) if res . status in ( 200 , 201 ): return await res . json () if res . status in ( 204 , 304 ): return else : raise HTTPException . with_code ( res . status , await res . text ()) async def fetch_client_user ( self ) -> \"models.BotUser\" : \"\"\" Fetch's the bot's user object. Returns: BotUser object representating the bot's user. \"\"\" try : res = await self . request ( RequestRoute ( Endpoints . fetch_client_user ())) return models . converters . payload_to_botuser ( self . _client , res ) except HTTPException as e : if e . code == 401 : raise Unauthorized ( \"Improper token passed.\" ) raise e async def edit_client_user ( self , username : str | None = None , avatar : bytes | None = None ) -> \"models.BotUser\" : payload : dict [ str , bytes | str ] = {} if username is not None : payload [ \"username\" ] = username if avatar is not None : payload [ \"avatar\" ] = avatar res : dict [ str , int | str | bool ] = await self . request ( RequestRoute ( Endpoints . fetch_client_user (), type = \"PATCH\" , json = payload ) ) return models . converters . payload_to_botuser ( self . _client , res ) async def create_message ( self , channel_id : int , content : str | None = None , * , embeds : typing . Sequence [ \"EmbedConstructor\" ] = (), components : typing . Sequence [ ActionRowContainer ] = (), reference : int | models . MessageReference | None = None , ) -> \"models.messages.Message\" : payload : dict [ str , typing . Any ] = { \"content\" : content , \"embeds\" : [ embed . _payload for embed in embeds ], \"components\" : [ comp . to_payload () for comp in components ], } if reference is not None : if isinstance ( reference , models . MessageReference ): payload [ \"message_reference\" ] = reference . to_payload () else : payload [ \"message_reference\" ] = models . MessageReference ( message_id = reference ) . to_payload () res : dict [ str , typing . Any ] = await self . request ( RequestRoute ( Endpoints . create_message ( channel_id ), type = \"POST\" , json = payload ), ) return models . converters . payload_to_message ( self . _client , res )","title":"RESTClient"},{"location":"api_reference/rest/#wyvern.rest.RESTClient.fetch_client_user","text":"Fetch's the bot's user object. Returns: BotUser object representating the bot's user. Source code in wyvern/rest/__init__.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 async def fetch_client_user ( self ) -> \"models.BotUser\" : \"\"\" Fetch's the bot's user object. Returns: BotUser object representating the bot's user. \"\"\" try : res = await self . request ( RequestRoute ( Endpoints . fetch_client_user ())) return models . converters . payload_to_botuser ( self . _client , res ) except HTTPException as e : if e . code == 401 : raise Unauthorized ( \"Improper token passed.\" ) raise e","title":"fetch_client_user()"},{"location":"api_reference/components/base/","text":"ButtonStyle Bases: enum . IntEnum Enums for Button style. Source code in wyvern/components/base.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class ButtonStyle ( enum . IntEnum ): \"\"\"Enums for Button style.\"\"\" PRIMARY = 1 \"\"\"A primary blurple discord button.\"\"\" SECONDARY = 2 \"\"\"A secondary gray discord button.\"\"\" SUCCESS = 3 \"\"\"Green discord button.\"\"\" DANGER = 4 \"\"\"Red discord button.\"\"\" LINK = 5 \"\"\"Button pointing to an URL\"\"\" BLURPLE = PRIMARY \"\"\"Alias for PRIMARY\"\"\" GRAY = SECONDARY \"\"\"Alias for SECONDARY\"\"\" GREY = SECONDARY \"\"\"Alias for SECONDARY\"\"\" GREEN = SUCCESS \"\"\"Alias for SUCCESS\"\"\" RED = DANGER \"\"\"Alias for DANGER\"\"\" URL = LINK \"\"\"Alias for LINK\"\"\" BLURPLE = PRIMARY class-attribute Alias for PRIMARY DANGER = 4 class-attribute Red discord button. GRAY = SECONDARY class-attribute Alias for SECONDARY GREEN = SUCCESS class-attribute Alias for SUCCESS GREY = SECONDARY class-attribute Alias for SECONDARY LINK = 5 class-attribute Button pointing to an URL PRIMARY = 1 class-attribute A primary blurple discord button. RED = DANGER class-attribute Alias for DANGER SECONDARY = 2 class-attribute A secondary gray discord button. SUCCESS = 3 class-attribute Green discord button. URL = LINK class-attribute Alias for LINK Component Represents a discord component. Is the base class for other components. Source code in wyvern/components/base.py 67 68 69 70 71 72 73 74 75 class Component : \"\"\"Represents a discord component. Is the base class for other components.\"\"\" type : ComponentType \"\"\"Type of the component.\"\"\" def to_payload ( self ) -> dict [ str , typing . Any ]: return {} type : ComponentType class-attribute Type of the component.","title":"base"},{"location":"api_reference/components/base/#wyvern.components.base.ButtonStyle","text":"Bases: enum . IntEnum Enums for Button style. Source code in wyvern/components/base.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class ButtonStyle ( enum . IntEnum ): \"\"\"Enums for Button style.\"\"\" PRIMARY = 1 \"\"\"A primary blurple discord button.\"\"\" SECONDARY = 2 \"\"\"A secondary gray discord button.\"\"\" SUCCESS = 3 \"\"\"Green discord button.\"\"\" DANGER = 4 \"\"\"Red discord button.\"\"\" LINK = 5 \"\"\"Button pointing to an URL\"\"\" BLURPLE = PRIMARY \"\"\"Alias for PRIMARY\"\"\" GRAY = SECONDARY \"\"\"Alias for SECONDARY\"\"\" GREY = SECONDARY \"\"\"Alias for SECONDARY\"\"\" GREEN = SUCCESS \"\"\"Alias for SUCCESS\"\"\" RED = DANGER \"\"\"Alias for DANGER\"\"\" URL = LINK \"\"\"Alias for LINK\"\"\"","title":"ButtonStyle"},{"location":"api_reference/components/base/#wyvern.components.base.ButtonStyle.BLURPLE","text":"Alias for PRIMARY","title":"BLURPLE"},{"location":"api_reference/components/base/#wyvern.components.base.ButtonStyle.DANGER","text":"Red discord button.","title":"DANGER"},{"location":"api_reference/components/base/#wyvern.components.base.ButtonStyle.GRAY","text":"Alias for SECONDARY","title":"GRAY"},{"location":"api_reference/components/base/#wyvern.components.base.ButtonStyle.GREEN","text":"Alias for SUCCESS","title":"GREEN"},{"location":"api_reference/components/base/#wyvern.components.base.ButtonStyle.GREY","text":"Alias for SECONDARY","title":"GREY"},{"location":"api_reference/components/base/#wyvern.components.base.ButtonStyle.LINK","text":"Button pointing to an URL","title":"LINK"},{"location":"api_reference/components/base/#wyvern.components.base.ButtonStyle.PRIMARY","text":"A primary blurple discord button.","title":"PRIMARY"},{"location":"api_reference/components/base/#wyvern.components.base.ButtonStyle.RED","text":"Alias for DANGER","title":"RED"},{"location":"api_reference/components/base/#wyvern.components.base.ButtonStyle.SECONDARY","text":"A secondary gray discord button.","title":"SECONDARY"},{"location":"api_reference/components/base/#wyvern.components.base.ButtonStyle.SUCCESS","text":"Green discord button.","title":"SUCCESS"},{"location":"api_reference/components/base/#wyvern.components.base.ButtonStyle.URL","text":"Alias for LINK","title":"URL"},{"location":"api_reference/components/base/#wyvern.components.base.Component","text":"Represents a discord component. Is the base class for other components. Source code in wyvern/components/base.py 67 68 69 70 71 72 73 74 75 class Component : \"\"\"Represents a discord component. Is the base class for other components.\"\"\" type : ComponentType \"\"\"Type of the component.\"\"\" def to_payload ( self ) -> dict [ str , typing . Any ]: return {}","title":"Component"},{"location":"api_reference/components/base/#wyvern.components.base.Component.type","text":"Type of the component.","title":"type"},{"location":"api_reference/components/buttons/","text":"Button Bases: Component Represents a discord button. The properties mentioned below can be used to create a button. Source code in wyvern/components/buttons.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 @attrs . define ( kw_only = True , slots = True , repr = True ) class Button ( Component ): \"\"\"Represents a discord button. The properties mentioned below can be used to create a button. \"\"\" style : ButtonStyle = ButtonStyle . SECONDARY \"\"\"Style of the button.\"\"\" label : str | None = None \"\"\"Button's label.\"\"\" emoji : str | \"CustomEmoji\" | None = None \"\"\"Emoji embedded in the button.\"\"\" custom_id : str | None = None \"\"\"Custom id for the component.\"\"\" disabled : bool = False \"\"\"True if the component is disabled.\"\"\" url : str | None = None \"\"\"The URL this button points to, if any.\"\"\" type : ComponentType = ComponentType . BUTTON def to_payload ( self ) -> dict [ str , typing . Any ]: payload : dict [ str , typing . Any ] = { \"type\" : int ( self . type ), \"style\" : int ( self . style ), \"label\" : self . label , \"custom_id\" : self . custom_id or \"wyvern.NO_CUSTOM_ID\" , \"disabled\" : self . disabled , \"url\" : self . url , } if self . emoji is not None : payload [ \"emoji\" ] = ( { \"name\" : self . emoji } if ( not isinstance ( self . emoji , CustomEmoji )) else { \"name\" : self . emoji . name , \"id\" : self . emoji . id , \"animated\" : self . emoji . is_animated } ) return payload custom_id : str | None = None class-attribute Custom id for the component. disabled : bool = False class-attribute True if the component is disabled. emoji : str | CustomEmoji | None = None class-attribute Emoji embedded in the button. label : str | None = None class-attribute Button's label. style : ButtonStyle = ButtonStyle . SECONDARY class-attribute Style of the button. url : str | None = None class-attribute The URL this button points to, if any.","title":"buttons"},{"location":"api_reference/components/buttons/#wyvern.components.buttons.Button","text":"Bases: Component Represents a discord button. The properties mentioned below can be used to create a button. Source code in wyvern/components/buttons.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 @attrs . define ( kw_only = True , slots = True , repr = True ) class Button ( Component ): \"\"\"Represents a discord button. The properties mentioned below can be used to create a button. \"\"\" style : ButtonStyle = ButtonStyle . SECONDARY \"\"\"Style of the button.\"\"\" label : str | None = None \"\"\"Button's label.\"\"\" emoji : str | \"CustomEmoji\" | None = None \"\"\"Emoji embedded in the button.\"\"\" custom_id : str | None = None \"\"\"Custom id for the component.\"\"\" disabled : bool = False \"\"\"True if the component is disabled.\"\"\" url : str | None = None \"\"\"The URL this button points to, if any.\"\"\" type : ComponentType = ComponentType . BUTTON def to_payload ( self ) -> dict [ str , typing . Any ]: payload : dict [ str , typing . Any ] = { \"type\" : int ( self . type ), \"style\" : int ( self . style ), \"label\" : self . label , \"custom_id\" : self . custom_id or \"wyvern.NO_CUSTOM_ID\" , \"disabled\" : self . disabled , \"url\" : self . url , } if self . emoji is not None : payload [ \"emoji\" ] = ( { \"name\" : self . emoji } if ( not isinstance ( self . emoji , CustomEmoji )) else { \"name\" : self . emoji . name , \"id\" : self . emoji . id , \"animated\" : self . emoji . is_animated } ) return payload","title":"Button"},{"location":"api_reference/components/buttons/#wyvern.components.buttons.Button.custom_id","text":"Custom id for the component.","title":"custom_id"},{"location":"api_reference/components/buttons/#wyvern.components.buttons.Button.disabled","text":"True if the component is disabled.","title":"disabled"},{"location":"api_reference/components/buttons/#wyvern.components.buttons.Button.emoji","text":"Emoji embedded in the button.","title":"emoji"},{"location":"api_reference/components/buttons/#wyvern.components.buttons.Button.label","text":"Button's label.","title":"label"},{"location":"api_reference/components/buttons/#wyvern.components.buttons.Button.style","text":"Style of the button.","title":"style"},{"location":"api_reference/components/buttons/#wyvern.components.buttons.Button.url","text":"The URL this button points to, if any.","title":"url"},{"location":"api_reference/components/container/","text":"ActionRowContainer Bases: Component Interface to create an Action Row. This class accepts and stores. other discord components. Source code in wyvern/components/container.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 class ActionRowContainer ( Component ): \"\"\"Interface to create an Action Row. This class accepts and stores. other discord components. \"\"\" type = ComponentType . ACTION_ROW items : list [ Component ] = [] \"\"\"List of items stored in the container.\"\"\" def __init__ ( self , * items : Component ) -> None : for item in items : self . items . append ( item ) super () . __init__ () def to_payload ( self ) -> dict [ str , typing . Any ]: return { \"type\" : int ( self . type ), \"components\" : [ item . to_payload () for item in self . items ]} def add_button ( self , * , style : ButtonStyle = ButtonStyle . SECONDARY , label : str | None = None , emoji : str | \"CustomEmoji\" | None = None , custom_id : str | None = None , disabled : bool = False , url : str | None = None , ) -> Button : \"\"\"Adds a button to the container. Parameters ---------- style : wyvern.components.base.ButtonStyle The style of button. label : str | None Button's label. emoji : str | wyvern.models.emojis.CustomEmoji A unicode emoji or a custom one. custom_id : str A custom id set to the button. disabled : bool Set this to [True][] to disable clicks on button. url : str The URL this button points to. Returns ------- wyvern.components.buttons.Button The button that was created. \"\"\" self . items . append ( button := Button ( type = ComponentType . BUTTON , style = style , label = label , emoji = emoji , custom_id = custom_id , disabled = disabled , url = url , ) ) return button items : list [ Component ] = [] class-attribute List of items stored in the container. add_button ( * , style = ButtonStyle . SECONDARY , label = None , emoji = None , custom_id = None , disabled = False , url = None ) Adds a button to the container. Parameters: Name Type Description Default style wyvern . components . base . ButtonStyle The style of button. ButtonStyle.SECONDARY label str | None Button's label. None emoji str | wyvern . models . emojis . CustomEmoji A unicode emoji or a custom one. None custom_id str A custom id set to the button. None disabled bool Set this to True to disable clicks on button. False url str The URL this button points to. None Returns: Type Description wyvern . components . buttons . Button The button that was created. Source code in wyvern/components/container.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def add_button ( self , * , style : ButtonStyle = ButtonStyle . SECONDARY , label : str | None = None , emoji : str | \"CustomEmoji\" | None = None , custom_id : str | None = None , disabled : bool = False , url : str | None = None , ) -> Button : \"\"\"Adds a button to the container. Parameters ---------- style : wyvern.components.base.ButtonStyle The style of button. label : str | None Button's label. emoji : str | wyvern.models.emojis.CustomEmoji A unicode emoji or a custom one. custom_id : str A custom id set to the button. disabled : bool Set this to [True][] to disable clicks on button. url : str The URL this button points to. Returns ------- wyvern.components.buttons.Button The button that was created. \"\"\" self . items . append ( button := Button ( type = ComponentType . BUTTON , style = style , label = label , emoji = emoji , custom_id = custom_id , disabled = disabled , url = url , ) ) return button","title":"container"},{"location":"api_reference/components/container/#wyvern.components.container.ActionRowContainer","text":"Bases: Component Interface to create an Action Row. This class accepts and stores. other discord components. Source code in wyvern/components/container.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 class ActionRowContainer ( Component ): \"\"\"Interface to create an Action Row. This class accepts and stores. other discord components. \"\"\" type = ComponentType . ACTION_ROW items : list [ Component ] = [] \"\"\"List of items stored in the container.\"\"\" def __init__ ( self , * items : Component ) -> None : for item in items : self . items . append ( item ) super () . __init__ () def to_payload ( self ) -> dict [ str , typing . Any ]: return { \"type\" : int ( self . type ), \"components\" : [ item . to_payload () for item in self . items ]} def add_button ( self , * , style : ButtonStyle = ButtonStyle . SECONDARY , label : str | None = None , emoji : str | \"CustomEmoji\" | None = None , custom_id : str | None = None , disabled : bool = False , url : str | None = None , ) -> Button : \"\"\"Adds a button to the container. Parameters ---------- style : wyvern.components.base.ButtonStyle The style of button. label : str | None Button's label. emoji : str | wyvern.models.emojis.CustomEmoji A unicode emoji or a custom one. custom_id : str A custom id set to the button. disabled : bool Set this to [True][] to disable clicks on button. url : str The URL this button points to. Returns ------- wyvern.components.buttons.Button The button that was created. \"\"\" self . items . append ( button := Button ( type = ComponentType . BUTTON , style = style , label = label , emoji = emoji , custom_id = custom_id , disabled = disabled , url = url , ) ) return button","title":"ActionRowContainer"},{"location":"api_reference/components/container/#wyvern.components.container.ActionRowContainer.items","text":"List of items stored in the container.","title":"items"},{"location":"api_reference/components/container/#wyvern.components.container.ActionRowContainer.add_button","text":"Adds a button to the container. Parameters: Name Type Description Default style wyvern . components . base . ButtonStyle The style of button. ButtonStyle.SECONDARY label str | None Button's label. None emoji str | wyvern . models . emojis . CustomEmoji A unicode emoji or a custom one. None custom_id str A custom id set to the button. None disabled bool Set this to True to disable clicks on button. False url str The URL this button points to. None Returns: Type Description wyvern . components . buttons . Button The button that was created. Source code in wyvern/components/container.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def add_button ( self , * , style : ButtonStyle = ButtonStyle . SECONDARY , label : str | None = None , emoji : str | \"CustomEmoji\" | None = None , custom_id : str | None = None , disabled : bool = False , url : str | None = None , ) -> Button : \"\"\"Adds a button to the container. Parameters ---------- style : wyvern.components.base.ButtonStyle The style of button. label : str | None Button's label. emoji : str | wyvern.models.emojis.CustomEmoji A unicode emoji or a custom one. custom_id : str A custom id set to the button. disabled : bool Set this to [True][] to disable clicks on button. url : str The URL this button points to. Returns ------- wyvern.components.buttons.Button The button that was created. \"\"\" self . items . append ( button := Button ( type = ComponentType . BUTTON , style = style , label = label , emoji = emoji , custom_id = custom_id , disabled = disabled , url = url , ) ) return button","title":"add_button()"},{"location":"api_reference/constructors/embeds/","text":"Embed Read-only Embed class returned while parsing message objects. To create a sendable embed, use wyvern.constructors.embeds.EmbedConstructor instead. Source code in wyvern/constructors/embeds.py 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 @typing . final @attrs . define ( slots = True , kw_only = True , eq = True , repr = True ) class Embed : \"\"\" Read-only Embed class returned while parsing message objects. To create a sendable embed, use [wyvern.constructors.embeds.EmbedConstructor][] instead. \"\"\" payload : dict [ str , typing . Any ] \"\"\"The raw payload.\"\"\" title : str | None = None \"\"\"Title of the embed.\"\"\" description : str | None = None \"\"\"Description fo the embed\"\"\" url : str | None = None \"\"\"URL of the embed\"\"\" color : int = 0 \"\"\"Color of the embed.\"\"\" timestamp : datetime . datetime | None = None \"\"\"Timestamp of the embed.\"\"\" colour = color \"\"\"Alias for color.\"\"\" fields : list [ EmbedField ] = [] \"\"\"List of fields related to this embed.\"\"\" author : EmbedAuthor | None = None \"\"\"Author of the embed.\"\"\" footer : EmbedFooter | None = None \"\"\"Footer of the embed.\"\"\" def to_constructor ( self ) -> EmbedConstructor : embed = EmbedConstructor () embed . _payload = self . payload return embed author : EmbedAuthor | None = None class-attribute Author of the embed. color : int = 0 class-attribute Color of the embed. colour = color class-attribute Alias for color. description : str | None = None class-attribute Description fo the embed fields : list [ EmbedField ] = [] class-attribute List of fields related to this embed. footer : EmbedFooter | None = None class-attribute Footer of the embed. payload : dict [ str , typing . Any ] class-attribute The raw payload. timestamp : datetime . datetime | None = None class-attribute Timestamp of the embed. title : str | None = None class-attribute Title of the embed. url : str | None = None class-attribute URL of the embed EmbedAuthor Represents an embed author. Source code in wyvern/constructors/embeds.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 @typing . final @attrs . define ( slots = True ) class EmbedAuthor : \"\"\"Represents an embed author.\"\"\" name : str \"\"\"Name of the author.\"\"\" url : str | None = None \"\"\"URL that the author points to.\"\"\" icon_url : str | None = None \"\"\"URL of the author icon\"\"\" proxy_icon_url : str | None = None \"\"\"Proxy URL of icon.\"\"\" def to_payload ( self ) -> dict [ str , str | None ]: \"\"\"Converts the author to its payload.\"\"\" return { \"name\" : self . name , \"url\" : self . url , \"icon_url\" : self . icon_url } icon_url : str | None = None class-attribute URL of the author icon name : str class-attribute Name of the author. proxy_icon_url : str | None = None class-attribute Proxy URL of icon. url : str | None = None class-attribute URL that the author points to. to_payload () Converts the author to its payload. Source code in wyvern/constructors/embeds.py 47 48 49 def to_payload ( self ) -> dict [ str , str | None ]: \"\"\"Converts the author to its payload.\"\"\" return { \"name\" : self . name , \"url\" : self . url , \"icon_url\" : self . icon_url } EmbedConstructor Creates an sendable discord embed. Parameters: Name Type Description Default title str Name of the embed. None description str Description of the embed None color int Color of the embed. 0 url str URL which the title points to. None timestamp datetime . datetime Timestamp to put in the embed. None Source code in wyvern/constructors/embeds.pyclass EmbedConstructor : \"\"\" Creates an sendable discord embed. Parameters ---------- title : str Name of the embed. description : str Description of the embed color : int Color of the embed. url : str URL which the title points to. timestamp : datetime.datetime Timestamp to put in the embed. \"\"\" __slots__ : tuple [ str , ... ] = ( \"_payload\" ,) def __init__ ( self , * , title : str | None = None , description : str | None = None , color : int = 0 , colour : int = 0 , url : str | None = None , timestamp : datetime . datetime | None = None , ) -> None : self . _payload : dict [ str , typing . Any ] = { \"type\" : \"rich\" , \"fields\" : []} self . _payload [ \"title\" ] = title self . _payload [ \"description\" ] = description self . _payload [ \"color\" ] = color or colour self . _payload [ \"url\" ] = url self . _payload [ \"timestamp\" ] = timestamp def add_field ( self , * , name : str , value : str , inline : bool = True ) -> \"EmbedConstructor\" : \"\"\"Adds a field to the embed. Parameters ---------- name: str Name of the field. value: str Value of the filed inline: bool Weather the field is inline or not, defaults to [True][] Returns ------- wyvern.constructors.embeds.EmbedConstructor The constructor. \"\"\" field = EmbedField ( name , value , inline ) self . _payload [ \"fields\" ] . append ( field . to_payload ()) return self def set_author ( self , * , name : str , url : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the author for the embed. Parameters ---------- name: str Name of the author field. url: str The URL author points to. icon_url: str URL for image to embed in the author. Returns ------- wyvern.constructors.embeds.EmbedConstructor The constructor. \"\"\" author = EmbedAuthor ( name , url , icon_url ) self . _payload [ \"author\" ] = author . to_payload () return self def set_footer ( self , * , text : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the footer for the embed. Parameters ---------- text: str The text to appear in the footer icon_url: str URL for image to embed in the footer. Returns ------- wyvern.constructors.embeds.EmbedConstructor The constructor. \"\"\" footer = EmbedFooter ( text , icon_url ) self . _payload [ \"footer\" ] = footer . to_payload () return self def edit_init ( self , * , title : str | None = None , description : str | None = None , color : int = 0 , colour : int = 0 , url : str | None = None , timestamp : datetime . datetime | None = None , ) -> \"EmbedConstructor\" : self . _payload [ \"title\" ] = title or self . _payload . get ( \"title\" ) self . _payload [ \"description\" ] = description or self . _payload . get ( \"description\" ) self . _payload [ \"color\" ] = color or colour or self . _payload . get ( \"color\" ) self . _payload [ \"url\" ] = url or self . _payload . get ( \"url\" ) self . _payload [ \"timestamp\" ] = timestamp or self . _payload . get ( \"timestamp\" ) return self def build ( self ) -> \"Embed\" : return Embed ( payload = self . _payload , title = self . _payload . get ( \"title\" ), description = self . _payload . get ( \"description\" ), url = self . _payload . get ( \"url\" ), color = self . _payload . get ( \"color\" , 0 ), fields = [ EmbedField ( ** kargs . to_payload ()) for kargs in self . _payload . get ( \"fields\" , [])], author = self . _payload . get ( \"author\" ), footer = self . _payload . get ( \"footer\" ), ) add_field ( * , name , value , inline = True ) Adds a field to the embed. Parameters: Name Type Description Default name str Name of the field. required value str Value of the filed required inline bool Weather the field is inline or not, defaults to True True Returns: Type Description wyvern . constructors . embeds . EmbedConstructor The constructor. Source code in wyvern/constructors/embeds.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 def add_field ( self , * , name : str , value : str , inline : bool = True ) -> \"EmbedConstructor\" : \"\"\"Adds a field to the embed. Parameters ---------- name: str Name of the field. value: str Value of the filed inline: bool Weather the field is inline or not, defaults to [True][] Returns ------- wyvern.constructors.embeds.EmbedConstructor The constructor. \"\"\" field = EmbedField ( name , value , inline ) self . _payload [ \"fields\" ] . append ( field . to_payload ()) return self set_author ( * , name , url , icon_url = None ) Set's the author for the embed. Parameters: Name Type Description Default name str Name of the author field. required url str The URL author points to. required icon_url str | None URL for image to embed in the author. None Returns: Type Description wyvern . constructors . embeds . EmbedConstructor The constructor. Source code in wyvern/constructors/embeds.py 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 def set_author ( self , * , name : str , url : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the author for the embed. Parameters ---------- name: str Name of the author field. url: str The URL author points to. icon_url: str URL for image to embed in the author. Returns ------- wyvern.constructors.embeds.EmbedConstructor The constructor. \"\"\" author = EmbedAuthor ( name , url , icon_url ) self . _payload [ \"author\" ] = author . to_payload () return self set_footer ( * , text , icon_url = None ) Set's the footer for the embed. Parameters: Name Type Description Default text str The text to appear in the footer required icon_url str | None URL for image to embed in the footer. None Returns: Type Description wyvern . constructors . embeds . EmbedConstructor The constructor. Source code in wyvern/constructors/embeds.py 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 def set_footer ( self , * , text : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the footer for the embed. Parameters ---------- text: str The text to appear in the footer icon_url: str URL for image to embed in the footer. Returns ------- wyvern.constructors.embeds.EmbedConstructor The constructor. \"\"\" footer = EmbedFooter ( text , icon_url ) self . _payload [ \"footer\" ] = footer . to_payload () return self EmbedField Represnts an embed field. Source code in wyvern/constructors/embeds.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 @typing . final @attrs . define ( slots = True ) class EmbedField : \"\"\"Represnts an embed field.\"\"\" name : str \"\"\"Name of the field.\"\"\" value : str \"\"\"Value of the field.\"\"\" inline : bool = True \"\"\"Inline value for the file, defaults to True.\"\"\" def to_payload ( self ) -> dict [ str , str | bool ]: return { \"name\" : self . name , \"value\" : self . value , \"inline\" : self . inline } inline : bool = True class-attribute Inline value for the file, defaults to True. name : str class-attribute Name of the field. value : str class-attribute Value of the field. EmbedFooter Represents an embed footer Source code in wyvern/constructors/embeds.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 @typing . final @attrs . define ( slots = True ) class EmbedFooter : \"\"\"Represents an embed footer\"\"\" text : str \"\"\"The text in the footer.\"\"\" icon_url : str | None = None \"\"\"URL of the footer icon.\"\"\" proxy_icon_url : str | None = None \"\"\"Proxy URL of the icon\"\"\" def to_payload ( self ) -> dict [ str , str | None ]: \"\"\"Converts the footer to its payload.\"\"\" return { \"text\" : self . text , \"icon_url\" : self . icon_url } icon_url : str | None = None class-attribute URL of the footer icon. proxy_icon_url : str | None = None class-attribute Proxy URL of the icon text : str class-attribute The text in the footer. to_payload () Converts the footer to its payload. Source code in wyvern/constructors/embeds.py 64 65 66 def to_payload ( self ) -> dict [ str , str | None ]: \"\"\"Converts the footer to its payload.\"\"\" return { \"text\" : self . text , \"icon_url\" : self . icon_url }","title":"embed"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.Embed","text":"Read-only Embed class returned while parsing message objects. To create a sendable embed, use wyvern.constructors.embeds.EmbedConstructor instead. Source code in wyvern/constructors/embeds.py 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 @typing . final @attrs . define ( slots = True , kw_only = True , eq = True , repr = True ) class Embed : \"\"\" Read-only Embed class returned while parsing message objects. To create a sendable embed, use [wyvern.constructors.embeds.EmbedConstructor][] instead. \"\"\" payload : dict [ str , typing . Any ] \"\"\"The raw payload.\"\"\" title : str | None = None \"\"\"Title of the embed.\"\"\" description : str | None = None \"\"\"Description fo the embed\"\"\" url : str | None = None \"\"\"URL of the embed\"\"\" color : int = 0 \"\"\"Color of the embed.\"\"\" timestamp : datetime . datetime | None = None \"\"\"Timestamp of the embed.\"\"\" colour = color \"\"\"Alias for color.\"\"\" fields : list [ EmbedField ] = [] \"\"\"List of fields related to this embed.\"\"\" author : EmbedAuthor | None = None \"\"\"Author of the embed.\"\"\" footer : EmbedFooter | None = None \"\"\"Footer of the embed.\"\"\" def to_constructor ( self ) -> EmbedConstructor : embed = EmbedConstructor () embed . _payload = self . payload return embed","title":"Embed"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.Embed.author","text":"Author of the embed.","title":"author"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.Embed.color","text":"Color of the embed.","title":"color"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.Embed.colour","text":"Alias for color.","title":"colour"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.Embed.description","text":"Description fo the embed","title":"description"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.Embed.fields","text":"List of fields related to this embed.","title":"fields"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.Embed.footer","text":"Footer of the embed.","title":"footer"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.Embed.payload","text":"The raw payload.","title":"payload"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.Embed.timestamp","text":"Timestamp of the embed.","title":"timestamp"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.Embed.title","text":"Title of the embed.","title":"title"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.Embed.url","text":"URL of the embed","title":"url"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedAuthor","text":"Represents an embed author. Source code in wyvern/constructors/embeds.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 @typing . final @attrs . define ( slots = True ) class EmbedAuthor : \"\"\"Represents an embed author.\"\"\" name : str \"\"\"Name of the author.\"\"\" url : str | None = None \"\"\"URL that the author points to.\"\"\" icon_url : str | None = None \"\"\"URL of the author icon\"\"\" proxy_icon_url : str | None = None \"\"\"Proxy URL of icon.\"\"\" def to_payload ( self ) -> dict [ str , str | None ]: \"\"\"Converts the author to its payload.\"\"\" return { \"name\" : self . name , \"url\" : self . url , \"icon_url\" : self . icon_url }","title":"EmbedAuthor"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedAuthor.icon_url","text":"URL of the author icon","title":"icon_url"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedAuthor.name","text":"Name of the author.","title":"name"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedAuthor.proxy_icon_url","text":"Proxy URL of icon.","title":"proxy_icon_url"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedAuthor.url","text":"URL that the author points to.","title":"url"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedAuthor.to_payload","text":"Converts the author to its payload. Source code in wyvern/constructors/embeds.py 47 48 49 def to_payload ( self ) -> dict [ str , str | None ]: \"\"\"Converts the author to its payload.\"\"\" return { \"name\" : self . name , \"url\" : self . url , \"icon_url\" : self . icon_url }","title":"to_payload()"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedConstructor","text":"Creates an sendable discord embed. Parameters: Name Type Description Default title str Name of the embed. None description str Description of the embed None color int Color of the embed. 0 url str URL which the title points to. None timestamp datetime . datetime Timestamp to put in the embed. None Source code in wyvern/constructors/embeds.pyclass EmbedConstructor : \"\"\" Creates an sendable discord embed. Parameters ---------- title : str Name of the embed. description : str Description of the embed color : int Color of the embed. url : str URL which the title points to. timestamp : datetime.datetime Timestamp to put in the embed. \"\"\" __slots__ : tuple [ str , ... ] = ( \"_payload\" ,) def __init__ ( self , * , title : str | None = None , description : str | None = None , color : int = 0 , colour : int = 0 , url : str | None = None , timestamp : datetime . datetime | None = None , ) -> None : self . _payload : dict [ str , typing . Any ] = { \"type\" : \"rich\" , \"fields\" : []} self . _payload [ \"title\" ] = title self . _payload [ \"description\" ] = description self . _payload [ \"color\" ] = color or colour self . _payload [ \"url\" ] = url self . _payload [ \"timestamp\" ] = timestamp def add_field ( self , * , name : str , value : str , inline : bool = True ) -> \"EmbedConstructor\" : \"\"\"Adds a field to the embed. Parameters ---------- name: str Name of the field. value: str Value of the filed inline: bool Weather the field is inline or not, defaults to [True][] Returns ------- wyvern.constructors.embeds.EmbedConstructor The constructor. \"\"\" field = EmbedField ( name , value , inline ) self . _payload [ \"fields\" ] . append ( field . to_payload ()) return self def set_author ( self , * , name : str , url : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the author for the embed. Parameters ---------- name: str Name of the author field. url: str The URL author points to. icon_url: str URL for image to embed in the author. Returns ------- wyvern.constructors.embeds.EmbedConstructor The constructor. \"\"\" author = EmbedAuthor ( name , url , icon_url ) self . _payload [ \"author\" ] = author . to_payload () return self def set_footer ( self , * , text : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the footer for the embed. Parameters ---------- text: str The text to appear in the footer icon_url: str URL for image to embed in the footer. Returns ------- wyvern.constructors.embeds.EmbedConstructor The constructor. \"\"\" footer = EmbedFooter ( text , icon_url ) self . _payload [ \"footer\" ] = footer . to_payload () return self def edit_init ( self , * , title : str | None = None , description : str | None = None , color : int = 0 , colour : int = 0 , url : str | None = None , timestamp : datetime . datetime | None = None , ) -> \"EmbedConstructor\" : self . _payload [ \"title\" ] = title or self . _payload . get ( \"title\" ) self . _payload [ \"description\" ] = description or self . _payload . get ( \"description\" ) self . _payload [ \"color\" ] = color or colour or self . _payload . get ( \"color\" ) self . _payload [ \"url\" ] = url or self . _payload . get ( \"url\" ) self . _payload [ \"timestamp\" ] = timestamp or self . _payload . get ( \"timestamp\" ) return self def build ( self ) -> \"Embed\" : return Embed ( payload = self . _payload , title = self . _payload . get ( \"title\" ), description = self . _payload . get ( \"description\" ), url = self . _payload . get ( \"url\" ), color = self . _payload . get ( \"color\" , 0 ), fields = [ EmbedField ( ** kargs . to_payload ()) for kargs in self . _payload . get ( \"fields\" , [])], author = self . _payload . get ( \"author\" ), footer = self . _payload . get ( \"footer\" ), )","title":"EmbedConstructor"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedConstructor.add_field","text":"Adds a field to the embed. Parameters: Name Type Description Default name str Name of the field. required value str Value of the filed required inline bool Weather the field is inline or not, defaults to True True Returns: Type Description wyvern . constructors . embeds . EmbedConstructor The constructor. Source code in wyvern/constructors/embeds.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 def add_field ( self , * , name : str , value : str , inline : bool = True ) -> \"EmbedConstructor\" : \"\"\"Adds a field to the embed. Parameters ---------- name: str Name of the field. value: str Value of the filed inline: bool Weather the field is inline or not, defaults to [True][] Returns ------- wyvern.constructors.embeds.EmbedConstructor The constructor. \"\"\" field = EmbedField ( name , value , inline ) self . _payload [ \"fields\" ] . append ( field . to_payload ()) return self","title":"add_field()"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedConstructor.set_author","text":"Set's the author for the embed. Parameters: Name Type Description Default name str Name of the author field. required url str The URL author points to. required icon_url str | None URL for image to embed in the author. None Returns: Type Description wyvern . constructors . embeds . EmbedConstructor The constructor. Source code in wyvern/constructors/embeds.py 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 def set_author ( self , * , name : str , url : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the author for the embed. Parameters ---------- name: str Name of the author field. url: str The URL author points to. icon_url: str URL for image to embed in the author. Returns ------- wyvern.constructors.embeds.EmbedConstructor The constructor. \"\"\" author = EmbedAuthor ( name , url , icon_url ) self . _payload [ \"author\" ] = author . to_payload () return self","title":"set_author()"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedConstructor.set_footer","text":"Set's the footer for the embed. Parameters: Name Type Description Default text str The text to appear in the footer required icon_url str | None URL for image to embed in the footer. None Returns: Type Description wyvern . constructors . embeds . EmbedConstructor The constructor. Source code in wyvern/constructors/embeds.py 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 def set_footer ( self , * , text : str , icon_url : str | None = None ) -> \"EmbedConstructor\" : \"\"\" Set's the footer for the embed. Parameters ---------- text: str The text to appear in the footer icon_url: str URL for image to embed in the footer. Returns ------- wyvern.constructors.embeds.EmbedConstructor The constructor. \"\"\" footer = EmbedFooter ( text , icon_url ) self . _payload [ \"footer\" ] = footer . to_payload () return self","title":"set_footer()"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedField","text":"Represnts an embed field. Source code in wyvern/constructors/embeds.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 @typing . final @attrs . define ( slots = True ) class EmbedField : \"\"\"Represnts an embed field.\"\"\" name : str \"\"\"Name of the field.\"\"\" value : str \"\"\"Value of the field.\"\"\" inline : bool = True \"\"\"Inline value for the file, defaults to True.\"\"\" def to_payload ( self ) -> dict [ str , str | bool ]: return { \"name\" : self . name , \"value\" : self . value , \"inline\" : self . inline }","title":"EmbedField"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedField.inline","text":"Inline value for the file, defaults to True.","title":"inline"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedField.name","text":"Name of the field.","title":"name"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedField.value","text":"Value of the field.","title":"value"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedFooter","text":"Represents an embed footer Source code in wyvern/constructors/embeds.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 @typing . final @attrs . define ( slots = True ) class EmbedFooter : \"\"\"Represents an embed footer\"\"\" text : str \"\"\"The text in the footer.\"\"\" icon_url : str | None = None \"\"\"URL of the footer icon.\"\"\" proxy_icon_url : str | None = None \"\"\"Proxy URL of the icon\"\"\" def to_payload ( self ) -> dict [ str , str | None ]: \"\"\"Converts the footer to its payload.\"\"\" return { \"text\" : self . text , \"icon_url\" : self . icon_url }","title":"EmbedFooter"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedFooter.icon_url","text":"URL of the footer icon.","title":"icon_url"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedFooter.proxy_icon_url","text":"Proxy URL of the icon","title":"proxy_icon_url"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedFooter.text","text":"The text in the footer.","title":"text"},{"location":"api_reference/constructors/embeds/#wyvern.constructors.embeds.EmbedFooter.to_payload","text":"Converts the footer to its payload. Source code in wyvern/constructors/embeds.py 64 65 66 def to_payload ( self ) -> dict [ str , str | None ]: \"\"\"Converts the footer to its payload.\"\"\" return { \"text\" : self . text , \"icon_url\" : self . icon_url }","title":"to_payload()"},{"location":"api_reference/models/base/","text":"DiscordObject Represents a discord object. Parameters: Name Type Description Default _id int ID of the entity. required Attributes: Name Type Description id int ID of the entity. Source code in wyvern/models/base.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 class DiscordObject : \"\"\" Represents a discord object. Parameters ---------- _id: int ID of the entity. Attributes ---------- id: int ID of the entity. \"\"\" def __init__ ( self , _id : int ) -> None : self . id = _id def __eq__ ( self , obj : object ) -> bool : if not isinstance ( obj , DiscordObject ): return NotImplemented return self . id == obj . id @property def created_at ( self ) -> datetime . datetime : \"\"\" The datetime at which this entity was created. Returns ------- datetime.datetime \"\"\" return self . get_created_at ( self . id ) @classmethod def get_created_at ( cls , _id : int ) -> datetime . datetime : \"\"\" Get creation time of an entity using it's ID. \"\"\" timestamp = (( _id >> 22 ) + 1420070400000 ) / 1000 return datetime . datetime . fromtimestamp ( timestamp , datetime . timezone . utc ) created_at () property The datetime at which this entity was created. Returns: Type Description datetime . datetime Source code in wyvern/models/base.py 56 57 58 59 60 61 62 63 64 65 66 @property def created_at ( self ) -> datetime . datetime : \"\"\" The datetime at which this entity was created. Returns ------- datetime.datetime \"\"\" return self . get_created_at ( self . id ) get_created_at ( _id ) classmethod Get creation time of an entity using it's ID. Source code in wyvern/models/base.py 68 69 70 71 72 73 74 @classmethod def get_created_at ( cls , _id : int ) -> datetime . datetime : \"\"\" Get creation time of an entity using it's ID. \"\"\" timestamp = (( _id >> 22 ) + 1420070400000 ) / 1000 return datetime . datetime . fromtimestamp ( timestamp , datetime . timezone . utc )","title":"base"},{"location":"api_reference/models/base/#wyvern.models.base.DiscordObject","text":"Represents a discord object. Parameters: Name Type Description Default _id int ID of the entity. required Attributes: Name Type Description id int ID of the entity. Source code in wyvern/models/base.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 class DiscordObject : \"\"\" Represents a discord object. Parameters ---------- _id: int ID of the entity. Attributes ---------- id: int ID of the entity. \"\"\" def __init__ ( self , _id : int ) -> None : self . id = _id def __eq__ ( self , obj : object ) -> bool : if not isinstance ( obj , DiscordObject ): return NotImplemented return self . id == obj . id @property def created_at ( self ) -> datetime . datetime : \"\"\" The datetime at which this entity was created. Returns ------- datetime.datetime \"\"\" return self . get_created_at ( self . id ) @classmethod def get_created_at ( cls , _id : int ) -> datetime . datetime : \"\"\" Get creation time of an entity using it's ID. \"\"\" timestamp = (( _id >> 22 ) + 1420070400000 ) / 1000 return datetime . datetime . fromtimestamp ( timestamp , datetime . timezone . utc )","title":"DiscordObject"},{"location":"api_reference/models/base/#wyvern.models.base.DiscordObject.created_at","text":"The datetime at which this entity was created. Returns: Type Description datetime . datetime Source code in wyvern/models/base.py 56 57 58 59 60 61 62 63 64 65 66 @property def created_at ( self ) -> datetime . datetime : \"\"\" The datetime at which this entity was created. Returns ------- datetime.datetime \"\"\" return self . get_created_at ( self . id )","title":"created_at()"},{"location":"api_reference/models/base/#wyvern.models.base.DiscordObject.get_created_at","text":"Get creation time of an entity using it's ID. Source code in wyvern/models/base.py 68 69 70 71 72 73 74 @classmethod def get_created_at ( cls , _id : int ) -> datetime . datetime : \"\"\" Get creation time of an entity using it's ID. \"\"\" timestamp = (( _id >> 22 ) + 1420070400000 ) / 1000 return datetime . datetime . fromtimestamp ( timestamp , datetime . timezone . utc )","title":"get_created_at()"},{"location":"api_reference/models/messages/","text":"Message Bases: DiscordObject Represents a discord message. Source code in wyvern/models/messages.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @attrs . define ( kw_only = True , slots = True , repr = True , eq = True ) class Message ( DiscordObject ): \"\"\" Represents a discord message. \"\"\" _client : \"GatewayClient\" id : int \"\"\"ID of the message.\"\"\" tts : bool \"\"\"True if the message was a TTS message.\"\"\" pinned : bool \"\"\"Is the message is pinned.\"\"\" mentions : list [ \"User\" ] \"\"\"List of users mentioned in the message.\"\"\" mention_roles : list [ int ] \"\"\"List of ids for roles mentioned in the message.\"\"\" flags_value : int \"\"\"Value of message flags\"\"\" embeds : list [ \"Embed\" ] \"\"\"List of embeds attached to the message.\"\"\" edited_at : datetime . datetime | None \"\"\"When was the message last edited.\"\"\" content : str | None \"\"\"The message content. Needs [wyvern.intents.Intents.MESSAGE_CONTENT] to be access this in a guild context.\"\"\" channel_id : int \"\"\"ID of the channel where this message was sent.\"\"\" author : \"User\" \"\"\"The message author.\"\"\" message_reference : MessageReference | None \"\"\"The message reference, if any.\"\"\" attachments : list [ typing . Any ] \"\"\"File attachments in this message.\"\"\" async def reply ( self , content : str | None = None , * , embed : \"EmbedConstructor\" | None = None , embeds : typing . Sequence [ \"EmbedConstructor\" ] = (), components : typing . Sequence [ \"ActionRowContainer\" ] = (), ) -> \"Message\" : if all ([ embed , embeds ]): raise ValueError ( \"You cannot use both embed and embeds kwarg.\" ) embeds = [ embed ] if embed else embeds return await self . _client . rest . create_message ( self . channel_id , content , embeds = embeds , reference = self . id , components = components ) attachments : list [ typing . Any ] class-attribute File attachments in this message. author : User class-attribute The message author. channel_id : int class-attribute ID of the channel where this message was sent. content : str | None class-attribute The message content. Needs [wyvern.intents.Intents.MESSAGE_CONTENT] to be access this in a guild context. edited_at : datetime . datetime | None class-attribute When was the message last edited. embeds : list [ Embed ] class-attribute List of embeds attached to the message. flags_value : int class-attribute Value of message flags id : int class-attribute ID of the message. mention_roles : list [ int ] class-attribute List of ids for roles mentioned in the message. mentions : list [ User ] class-attribute List of users mentioned in the message. message_reference : MessageReference | None class-attribute The message reference, if any. pinned : bool class-attribute Is the message is pinned. tts : bool class-attribute True if the message was a TTS message. MessageReference Source code in wyvern/models/messages.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 @attrs . define ( kw_only = True , slots = True , repr = True ) class MessageReference : channel_id : int | None = None \"\"\"ID of the channel.\"\"\" message_id : int | None = None \"\"\"ID of the message.\"\"\" guild_id : int | None = None \"\"\"ID of the guild, if any.\"\"\" fail_if_not_exists : bool = True \"\"\"Weather to raise error if message does not exist.\"\"\" def to_payload ( self ) -> dict [ str , int | bool | None ]: \"\"\"Converts the object to a sendable payload. Returns ------- dict[str, int| bool] \"\"\" return { \"channel_id\" : self . channel_id , \"message_id\" : self . message_id , \"guild_id\" : self . guild_id , \"fail_if_not_exists\" : self . fail_if_not_exists , } channel_id : int | None = None class-attribute ID of the channel. fail_if_not_exists : bool = True class-attribute Weather to raise error if message does not exist. guild_id : int | None = None class-attribute ID of the guild, if any. message_id : int | None = None class-attribute ID of the message. to_payload () Converts the object to a sendable payload. Returns: Type Description dict [ str , int | bool ] Source code in wyvern/models/messages.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def to_payload ( self ) -> dict [ str , int | bool | None ]: \"\"\"Converts the object to a sendable payload. Returns ------- dict[str, int| bool] \"\"\" return { \"channel_id\" : self . channel_id , \"message_id\" : self . message_id , \"guild_id\" : self . guild_id , \"fail_if_not_exists\" : self . fail_if_not_exists , }","title":"messages"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message","text":"Bases: DiscordObject Represents a discord message. Source code in wyvern/models/messages.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @attrs . define ( kw_only = True , slots = True , repr = True , eq = True ) class Message ( DiscordObject ): \"\"\" Represents a discord message. \"\"\" _client : \"GatewayClient\" id : int \"\"\"ID of the message.\"\"\" tts : bool \"\"\"True if the message was a TTS message.\"\"\" pinned : bool \"\"\"Is the message is pinned.\"\"\" mentions : list [ \"User\" ] \"\"\"List of users mentioned in the message.\"\"\" mention_roles : list [ int ] \"\"\"List of ids for roles mentioned in the message.\"\"\" flags_value : int \"\"\"Value of message flags\"\"\" embeds : list [ \"Embed\" ] \"\"\"List of embeds attached to the message.\"\"\" edited_at : datetime . datetime | None \"\"\"When was the message last edited.\"\"\" content : str | None \"\"\"The message content. Needs [wyvern.intents.Intents.MESSAGE_CONTENT] to be access this in a guild context.\"\"\" channel_id : int \"\"\"ID of the channel where this message was sent.\"\"\" author : \"User\" \"\"\"The message author.\"\"\" message_reference : MessageReference | None \"\"\"The message reference, if any.\"\"\" attachments : list [ typing . Any ] \"\"\"File attachments in this message.\"\"\" async def reply ( self , content : str | None = None , * , embed : \"EmbedConstructor\" | None = None , embeds : typing . Sequence [ \"EmbedConstructor\" ] = (), components : typing . Sequence [ \"ActionRowContainer\" ] = (), ) -> \"Message\" : if all ([ embed , embeds ]): raise ValueError ( \"You cannot use both embed and embeds kwarg.\" ) embeds = [ embed ] if embed else embeds return await self . _client . rest . create_message ( self . channel_id , content , embeds = embeds , reference = self . id , components = components )","title":"Message"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message.attachments","text":"File attachments in this message.","title":"attachments"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message.author","text":"The message author.","title":"author"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message.channel_id","text":"ID of the channel where this message was sent.","title":"channel_id"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message.content","text":"The message content. Needs [wyvern.intents.Intents.MESSAGE_CONTENT] to be access this in a guild context.","title":"content"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message.edited_at","text":"When was the message last edited.","title":"edited_at"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message.embeds","text":"List of embeds attached to the message.","title":"embeds"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message.flags_value","text":"Value of message flags","title":"flags_value"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message.id","text":"ID of the message.","title":"id"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message.mention_roles","text":"List of ids for roles mentioned in the message.","title":"mention_roles"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message.mentions","text":"List of users mentioned in the message.","title":"mentions"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message.message_reference","text":"The message reference, if any.","title":"message_reference"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message.pinned","text":"Is the message is pinned.","title":"pinned"},{"location":"api_reference/models/messages/#wyvern.models.messages.Message.tts","text":"True if the message was a TTS message.","title":"tts"},{"location":"api_reference/models/messages/#wyvern.models.messages.MessageReference","text":"Source code in wyvern/models/messages.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 @attrs . define ( kw_only = True , slots = True , repr = True ) class MessageReference : channel_id : int | None = None \"\"\"ID of the channel.\"\"\" message_id : int | None = None \"\"\"ID of the message.\"\"\" guild_id : int | None = None \"\"\"ID of the guild, if any.\"\"\" fail_if_not_exists : bool = True \"\"\"Weather to raise error if message does not exist.\"\"\" def to_payload ( self ) -> dict [ str , int | bool | None ]: \"\"\"Converts the object to a sendable payload. Returns ------- dict[str, int| bool] \"\"\" return { \"channel_id\" : self . channel_id , \"message_id\" : self . message_id , \"guild_id\" : self . guild_id , \"fail_if_not_exists\" : self . fail_if_not_exists , }","title":"MessageReference"},{"location":"api_reference/models/messages/#wyvern.models.messages.MessageReference.channel_id","text":"ID of the channel.","title":"channel_id"},{"location":"api_reference/models/messages/#wyvern.models.messages.MessageReference.fail_if_not_exists","text":"Weather to raise error if message does not exist.","title":"fail_if_not_exists"},{"location":"api_reference/models/messages/#wyvern.models.messages.MessageReference.guild_id","text":"ID of the guild, if any.","title":"guild_id"},{"location":"api_reference/models/messages/#wyvern.models.messages.MessageReference.message_id","text":"ID of the message.","title":"message_id"},{"location":"api_reference/models/messages/#wyvern.models.messages.MessageReference.to_payload","text":"Converts the object to a sendable payload. Returns: Type Description dict [ str , int | bool ] Source code in wyvern/models/messages.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def to_payload ( self ) -> dict [ str , int | bool | None ]: \"\"\"Converts the object to a sendable payload. Returns ------- dict[str, int| bool] \"\"\" return { \"channel_id\" : self . channel_id , \"message_id\" : self . message_id , \"guild_id\" : self . guild_id , \"fail_if_not_exists\" : self . fail_if_not_exists , }","title":"to_payload()"},{"location":"examples/basic_bot/","text":"wyvern/examples/basic_client.py import wyvern # creating a GatewayClient instance and storing it into the client variable. # this acts as the interface between your bot and the code. client = wyvern . GatewayClient ( \"TOKEN\" , intents = wyvern . Intents . UNPRIVILEGED | wyvern . Intents . MESSAGE_CONTENT ) # creating an EventListener object and adding it to the client's event handler using the # @client.listen decorator. You can set the maximum amount of time this listener will get triggered using # the `max_trigger kwarg in the listener decorator.` @client . listener ( wyvern . Event . MESSAGE_CREATE ) async def message_create ( message : wyvern . Message ) -> None : \"\"\"This coroutine is triggerd whenever the MESSAGE_CREATE event gets dispatched.\"\"\" if message . content and message . content . lower () == \"!ping\" : await message . reply ( \"pong!\" ) # runs the bot. client . run ()","title":"Basic Bot"},{"location":"examples/custom_event_handler/","text":"wyvern/examples/event_handler.py import wyvern # subclassing to create a new EventHandler class. # events listeners can be added using the @wyvern.listener decorator. # the client can be accessed using client attribute inside the listener. class MyHandler ( wyvern . EventHandler ): @wyvern . listener ( wyvern . Event . MESSAGE_CREATE ) async def message_create ( self , message : wyvern . Message ) -> None : print ( f \"Message sent by { message . author . username } \" ) # the subclass' type ( !not instance ) is provided for the event_handler kwarg inside # the client class. which uses this custom EventHandler instead of a default one. client = wyvern . GatewayClient ( \"TOKEN\" , event_handler = MyHandler ) # runs the bot. client . run ()","title":"Custom Event Handler"}]}